//
// NotificationSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NotificationSchema: Codable, JSONEncodable, Hashable {

    public var id: String
    public var channels: [String]
    public var companyId: String
    public var countryCode: Double
    public var createdAt: String
    public var createdBy: String
    public var dashboardPushError: String
    public var dashboardPushSent: Bool
    public var deployedWorkflowId: String
    public var email: String?
    public var emailError: String?
    public var emailSent: Bool?
    public var linkToWorkflow: Bool
    public var mobilePushError: String
    public var mobilePushSent: Bool
    public var notificationContent: String
    public var notificationRequestId: String?
    public var smsError: String?
    public var smsNumber: Double?
    public var smsSent: Bool?
    public var targetUser: String
    public var viewed: Bool
    public var viewedAt: String?
    public var workflowId: String
    public var workflowName: String

    public init(id: String, channels: [String], companyId: String, countryCode: Double, createdAt: String, createdBy: String, dashboardPushError: String, dashboardPushSent: Bool, deployedWorkflowId: String, email: String? = nil, emailError: String? = nil, emailSent: Bool? = nil, linkToWorkflow: Bool, mobilePushError: String, mobilePushSent: Bool, notificationContent: String, notificationRequestId: String? = nil, smsError: String? = nil, smsNumber: Double? = nil, smsSent: Bool? = nil, targetUser: String, viewed: Bool, viewedAt: String? = nil, workflowId: String, workflowName: String) {
        self.id = id
        self.channels = channels
        self.companyId = companyId
        self.countryCode = countryCode
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.dashboardPushError = dashboardPushError
        self.dashboardPushSent = dashboardPushSent
        self.deployedWorkflowId = deployedWorkflowId
        self.email = email
        self.emailError = emailError
        self.emailSent = emailSent
        self.linkToWorkflow = linkToWorkflow
        self.mobilePushError = mobilePushError
        self.mobilePushSent = mobilePushSent
        self.notificationContent = notificationContent
        self.notificationRequestId = notificationRequestId
        self.smsError = smsError
        self.smsNumber = smsNumber
        self.smsSent = smsSent
        self.targetUser = targetUser
        self.viewed = viewed
        self.viewedAt = viewedAt
        self.workflowId = workflowId
        self.workflowName = workflowName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case channels
        case companyId = "company_id"
        case countryCode = "country_code"
        case createdAt = "created_at"
        case createdBy = "created_by"
        case dashboardPushError = "dashboard_push_error"
        case dashboardPushSent = "dashboard_push_sent"
        case deployedWorkflowId = "deployed_workflow_id"
        case email
        case emailError = "email_error"
        case emailSent = "email_sent"
        case linkToWorkflow = "link_to_workflow"
        case mobilePushError = "mobile_push_error"
        case mobilePushSent = "mobile_push_sent"
        case notificationContent = "notification_content"
        case notificationRequestId = "notification_request_id"
        case smsError = "sms_error"
        case smsNumber = "sms_number"
        case smsSent = "sms_sent"
        case targetUser = "target_user"
        case viewed
        case viewedAt = "viewed_at"
        case workflowId = "workflow_id"
        case workflowName = "workflow_name"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(channels, forKey: .channels)
        try container.encode(companyId, forKey: .companyId)
        try container.encode(countryCode, forKey: .countryCode)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(dashboardPushError, forKey: .dashboardPushError)
        try container.encode(dashboardPushSent, forKey: .dashboardPushSent)
        try container.encode(deployedWorkflowId, forKey: .deployedWorkflowId)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(emailError, forKey: .emailError)
        try container.encodeIfPresent(emailSent, forKey: .emailSent)
        try container.encode(linkToWorkflow, forKey: .linkToWorkflow)
        try container.encode(mobilePushError, forKey: .mobilePushError)
        try container.encode(mobilePushSent, forKey: .mobilePushSent)
        try container.encode(notificationContent, forKey: .notificationContent)
        try container.encodeIfPresent(notificationRequestId, forKey: .notificationRequestId)
        try container.encodeIfPresent(smsError, forKey: .smsError)
        try container.encodeIfPresent(smsNumber, forKey: .smsNumber)
        try container.encodeIfPresent(smsSent, forKey: .smsSent)
        try container.encode(targetUser, forKey: .targetUser)
        try container.encode(viewed, forKey: .viewed)
        try container.encodeIfPresent(viewedAt, forKey: .viewedAt)
        try container.encode(workflowId, forKey: .workflowId)
        try container.encode(workflowName, forKey: .workflowName)
    }
}

