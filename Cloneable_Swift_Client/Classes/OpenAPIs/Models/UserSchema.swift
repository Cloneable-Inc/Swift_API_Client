//
// UserSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserSchema: Codable, JSONEncodable, Hashable {

    public var id: String
    public var email: String
    public var firstName: String
    public var lastName: String
    public var confirmed: Bool
    public var active: Bool
    public var auth0Id: String
    public var companyRoles: [String]
    public var createdAt: Date
    public var updatedAt: Date
    public var companyId: String

    public init(id: String, email: String, firstName: String, lastName: String, confirmed: Bool, active: Bool, auth0Id: String, companyRoles: [String], createdAt: Date, updatedAt: Date, companyId: String) {
        self.id = id
        self.email = email
        self.firstName = firstName
        self.lastName = lastName
        self.confirmed = confirmed
        self.active = active
        self.auth0Id = auth0Id
        self.companyRoles = companyRoles
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.companyId = companyId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case email
        case firstName = "first_name"
        case lastName = "last_name"
        case confirmed
        case active
        case auth0Id = "auth0_id"
        case companyRoles = "company_roles"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case companyId = "company_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(email, forKey: .email)
        try container.encode(firstName, forKey: .firstName)
        try container.encode(lastName, forKey: .lastName)
        try container.encode(confirmed, forKey: .confirmed)
        try container.encode(active, forKey: .active)
        try container.encode(auth0Id, forKey: .auth0Id)
        try container.encode(companyRoles, forKey: .companyRoles)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(companyId, forKey: .companyId)
    }
}

