//
// CreateTriggerRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateTriggerRequest: Codable, JSONEncodable, Hashable {

    public enum Runtime: String, Codable, CaseIterable {
        case python = "python"
        case javascript = "javascript"
    }
    public enum ModelType: String, Codable, CaseIterable {
        case scheduled = "scheduled"
        case webhook = "webhook"
        case dataChange = "data_change"
    }
    public var name: String
    public var description: String
    public var code: String
    public var runtime: Runtime
    public var schedule: String?
    public var type: ModelType
    public var environmentVariables: [String: String]?

    public init(name: String, description: String, code: String, runtime: Runtime, schedule: String? = nil, type: ModelType, environmentVariables: [String: String]? = nil) {
        self.name = name
        self.description = description
        self.code = code
        self.runtime = runtime
        self.schedule = schedule
        self.type = type
        self.environmentVariables = environmentVariables
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case code
        case runtime
        case schedule
        case type
        case environmentVariables = "environment_variables"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(code, forKey: .code)
        try container.encode(runtime, forKey: .runtime)
        try container.encodeIfPresent(schedule, forKey: .schedule)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(environmentVariables, forKey: .environmentVariables)
    }
}

