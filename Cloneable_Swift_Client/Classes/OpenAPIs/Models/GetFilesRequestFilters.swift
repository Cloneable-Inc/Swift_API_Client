//
// GetFilesRequestFilters.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetFilesRequestFilters: Codable, JSONEncodable, Hashable {

    public var company: String?
    public var createdBy: String?
    public var createdAt: String?
    public var type: String?
    public var typeRefId: String?
    public var relatedObjectId: String?
    public var relatedWorkflowId: String?
    public var savedToCloud: Bool?
    public var syncToEdge: Bool?

    public init(company: String? = nil, createdBy: String? = nil, createdAt: String? = nil, type: String? = nil, typeRefId: String? = nil, relatedObjectId: String? = nil, relatedWorkflowId: String? = nil, savedToCloud: Bool? = nil, syncToEdge: Bool? = nil) {
        self.company = company
        self.createdBy = createdBy
        self.createdAt = createdAt
        self.type = type
        self.typeRefId = typeRefId
        self.relatedObjectId = relatedObjectId
        self.relatedWorkflowId = relatedWorkflowId
        self.savedToCloud = savedToCloud
        self.syncToEdge = syncToEdge
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case company
        case createdBy = "created_by"
        case createdAt = "created_at"
        case type
        case typeRefId = "type_ref_id"
        case relatedObjectId = "related_object_id"
        case relatedWorkflowId = "related_workflow_id"
        case savedToCloud = "saved_to_cloud"
        case syncToEdge = "sync_to_edge"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(type, forKey: .type)
        try container.encodeIfPresent(typeRefId, forKey: .typeRefId)
        try container.encodeIfPresent(relatedObjectId, forKey: .relatedObjectId)
        try container.encodeIfPresent(relatedWorkflowId, forKey: .relatedWorkflowId)
        try container.encodeIfPresent(savedToCloud, forKey: .savedToCloud)
        try container.encodeIfPresent(syncToEdge, forKey: .syncToEdge)
    }
}

