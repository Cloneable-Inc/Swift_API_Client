//
// DataObjectSchemaFieldsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DataObjectSchemaFieldsInner: Codable, JSONEncodable, Hashable {

    public var arraySubType: String?
    public var displayName: String
    public var fieldId: String
    public var uniqueId: String
    public var linkedObjectDisplayName: String?
    public var linkedObjectName: String?
    public var linkedObjectRevision: Double?
    public var linkedObjectTemplateId: String?
    public var modifiedAt: String
    public var modifiedBy: String
    public var name: String
    public var storedValue: String?
    public var type: String

    public init(arraySubType: String? = nil, displayName: String, fieldId: String, uniqueId: String, linkedObjectDisplayName: String? = nil, linkedObjectName: String? = nil, linkedObjectRevision: Double? = nil, linkedObjectTemplateId: String? = nil, modifiedAt: String, modifiedBy: String, name: String, storedValue: String? = nil, type: String) {
        self.arraySubType = arraySubType
        self.displayName = displayName
        self.fieldId = fieldId
        self.uniqueId = uniqueId
        self.linkedObjectDisplayName = linkedObjectDisplayName
        self.linkedObjectName = linkedObjectName
        self.linkedObjectRevision = linkedObjectRevision
        self.linkedObjectTemplateId = linkedObjectTemplateId
        self.modifiedAt = modifiedAt
        self.modifiedBy = modifiedBy
        self.name = name
        self.storedValue = storedValue
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case arraySubType = "array_sub_type"
        case displayName = "display_name"
        case fieldId = "field_id"
        case uniqueId = "unique_id"
        case linkedObjectDisplayName = "linked_object_display_name"
        case linkedObjectName = "linked_object_name"
        case linkedObjectRevision = "linked_object_revision"
        case linkedObjectTemplateId = "linked_object_template_id"
        case modifiedAt = "modified_at"
        case modifiedBy = "modified_by"
        case name
        case storedValue = "stored_value"
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(arraySubType, forKey: .arraySubType)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(fieldId, forKey: .fieldId)
        try container.encode(uniqueId, forKey: .uniqueId)
        try container.encodeIfPresent(linkedObjectDisplayName, forKey: .linkedObjectDisplayName)
        try container.encodeIfPresent(linkedObjectName, forKey: .linkedObjectName)
        try container.encodeIfPresent(linkedObjectRevision, forKey: .linkedObjectRevision)
        try container.encodeIfPresent(linkedObjectTemplateId, forKey: .linkedObjectTemplateId)
        try container.encode(modifiedAt, forKey: .modifiedAt)
        try container.encode(modifiedBy, forKey: .modifiedBy)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(storedValue, forKey: .storedValue)
        try container.encode(type, forKey: .type)
    }
}

