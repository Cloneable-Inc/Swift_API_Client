//
// DeployedWorkflowSchemaComponentsInnerOutputsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DeployedWorkflowSchemaComponentsInnerOutputsInner: Codable, JSONEncodable, Hashable {

    public var dynamicOutputId: String
    public var group: String?
    public var outputImmediately: Bool?
    public var outputClassification: String?
    public var outputDataType: String
    public var outputDescription: String?
    public var outputId: String
    public var outputName: String
    public var _required: Bool?
    public var outputsArray: Bool?
    public var outputImmediatelyUserDefinable: Bool?
    public var additionalProperties: [String: AnyCodable]
    public var outputConnections: [DeployedWorkflowSchemaComponentsInnerOutputsInnerOutputConnectionsInner]?

    public init(dynamicOutputId: String, group: String? = nil, outputImmediately: Bool? = nil, outputClassification: String? = nil, outputDataType: String, outputDescription: String? = nil, outputId: String, outputName: String, _required: Bool? = nil, outputsArray: Bool? = nil, outputImmediatelyUserDefinable: Bool? = nil, additionalProperties: [String: AnyCodable], outputConnections: [DeployedWorkflowSchemaComponentsInnerOutputsInnerOutputConnectionsInner]? = nil) {
        self.dynamicOutputId = dynamicOutputId
        self.group = group
        self.outputImmediately = outputImmediately
        self.outputClassification = outputClassification
        self.outputDataType = outputDataType
        self.outputDescription = outputDescription
        self.outputId = outputId
        self.outputName = outputName
        self._required = _required
        self.outputsArray = outputsArray
        self.outputImmediatelyUserDefinable = outputImmediatelyUserDefinable
        self.additionalProperties = additionalProperties
        self.outputConnections = outputConnections
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case dynamicOutputId = "dynamic_output_id"
        case group
        case outputImmediately = "output_immediately"
        case outputClassification = "output_classification"
        case outputDataType = "output_data_type"
        case outputDescription = "output_description"
        case outputId = "output_id"
        case outputName = "output_name"
        case _required = "required"
        case outputsArray = "outputs_array"
        case outputImmediatelyUserDefinable = "output_immediately_user_definable"
        case additionalProperties = "additional_properties"
        case outputConnections = "output_connections"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(dynamicOutputId, forKey: .dynamicOutputId)
        try container.encodeIfPresent(group, forKey: .group)
        try container.encodeIfPresent(outputImmediately, forKey: .outputImmediately)
        try container.encodeIfPresent(outputClassification, forKey: .outputClassification)
        try container.encode(outputDataType, forKey: .outputDataType)
        try container.encodeIfPresent(outputDescription, forKey: .outputDescription)
        try container.encode(outputId, forKey: .outputId)
        try container.encode(outputName, forKey: .outputName)
        try container.encodeIfPresent(_required, forKey: ._required)
        try container.encodeIfPresent(outputsArray, forKey: .outputsArray)
        try container.encodeIfPresent(outputImmediatelyUserDefinable, forKey: .outputImmediatelyUserDefinable)
        try container.encode(additionalProperties, forKey: .additionalProperties)
        try container.encodeIfPresent(outputConnections, forKey: .outputConnections)
    }
}

