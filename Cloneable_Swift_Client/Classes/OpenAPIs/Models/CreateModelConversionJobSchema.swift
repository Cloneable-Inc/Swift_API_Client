//
// CreateModelConversionJobSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateModelConversionJobSchema: Codable, JSONEncodable, Hashable {

    public enum Status: String, Codable, CaseIterable {
        case pending = "pending"
        case running = "running"
        case completed = "completed"
        case failed = "failed"
    }
    public var id: UUID?
    public var companyId: String
    public var createdAt: Date?
    public var createdBy: String
    public var updatedAt: Date?
    public var trainingFileId: UUID?
    public var exportFormat: String
    public var params: [CreateModelConversionJobRequestParamsInner]?
    public var jobRunnerId: String?
    public var status: Status?
    public var originModelId: UUID
    public var convertedModelId: UUID?
    public var errorMessage: String?
    public var errorStack: String?
    public var errorCode: String?

    public init(id: UUID? = nil, companyId: String, createdAt: Date? = nil, createdBy: String, updatedAt: Date? = nil, trainingFileId: UUID? = nil, exportFormat: String, params: [CreateModelConversionJobRequestParamsInner]? = nil, jobRunnerId: String? = nil, status: Status? = nil, originModelId: UUID, convertedModelId: UUID? = nil, errorMessage: String? = nil, errorStack: String? = nil, errorCode: String? = nil) {
        self.id = id
        self.companyId = companyId
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.updatedAt = updatedAt
        self.trainingFileId = trainingFileId
        self.exportFormat = exportFormat
        self.params = params
        self.jobRunnerId = jobRunnerId
        self.status = status
        self.originModelId = originModelId
        self.convertedModelId = convertedModelId
        self.errorMessage = errorMessage
        self.errorStack = errorStack
        self.errorCode = errorCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case companyId = "company_id"
        case createdAt = "created_at"
        case createdBy = "created_by"
        case updatedAt = "updated_at"
        case trainingFileId = "training_file_id"
        case exportFormat = "export_format"
        case params
        case jobRunnerId = "job_runner_id"
        case status
        case originModelId = "origin_model_id"
        case convertedModelId = "converted_model_id"
        case errorMessage = "error_message"
        case errorStack = "error_stack"
        case errorCode = "error_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(companyId, forKey: .companyId)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(trainingFileId, forKey: .trainingFileId)
        try container.encode(exportFormat, forKey: .exportFormat)
        try container.encodeIfPresent(params, forKey: .params)
        try container.encodeIfPresent(jobRunnerId, forKey: .jobRunnerId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encode(originModelId, forKey: .originModelId)
        try container.encodeIfPresent(convertedModelId, forKey: .convertedModelId)
        try container.encodeIfPresent(errorMessage, forKey: .errorMessage)
        try container.encodeIfPresent(errorStack, forKey: .errorStack)
        try container.encodeIfPresent(errorCode, forKey: .errorCode)
    }
}

