//
// ChatRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ChatRequest: Codable, JSONEncodable, Hashable {

    static let frequencyPenaltyRule = NumericRule<Double>(minimum: -2, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    static let topLogprobsRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: 20, exclusiveMaximum: false, multipleOf: nil)
    static let maxTokensRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let nRule = NumericRule<Int>(minimum: 0, exclusiveMinimum: false, maximum: nil, exclusiveMaximum: false, multipleOf: nil)
    static let presencePenaltyRule = NumericRule<Double>(minimum: -2, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    static let temperatureRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 2, exclusiveMaximum: false, multipleOf: nil)
    static let topPRule = NumericRule<Double>(minimum: 0, exclusiveMinimum: false, maximum: 1, exclusiveMaximum: false, multipleOf: nil)
    static let toolsRule = ArrayRule(minItems: nil, maxItems: 128, uniqueItems: false)
    /** A list of messages comprising the conversation so far */
    public var messages: [ComponentAssitantRequestInner]
    /** Penalty for token frequency in the generated text (-2.0 to 2.0) */
    public var frequencyPenalty: Double?
    /** Modify likelihood of specified tokens appearing in the completion */
    public var logitBias: [String: Int]?
    /** Whether to return log probabilities of the output tokens */
    public var logprobs: Bool?
    /** Number of most likely tokens to return at each position (0-20) */
    public var topLogprobs: Int?
    /** Maximum number of tokens to generate */
    public var maxTokens: Int?
    /** Number of chat completion choices to generate */
    public var n: Int?
    /** Penalty for new tokens based on their presence in the text so far (-2.0 to 2.0) */
    public var presencePenalty: Double?
    public var responseFormat: ChatRequestResponseFormat?
    /** Seed for deterministic sampling */
    public var seed: Int?
    public var stop: ChatRequestStop?
    /** Whether to stream partial message deltas */
    public var stream: Bool?
    /** Sampling temperature (0-2) */
    public var temperature: Double?
    /** Nucleus sampling probability (0-1) */
    public var topP: Double?
    /** List of tools (functions) the model may call */
    public var tools: [ChatRequestToolsInner]?
    public var toolChoice: ChatRequestToolChoice?
    /** A unique identifier representing the end-user */
    public var user: String?

    public init(messages: [ComponentAssitantRequestInner], frequencyPenalty: Double? = nil, logitBias: [String: Int]? = nil, logprobs: Bool? = nil, topLogprobs: Int? = nil, maxTokens: Int? = nil, n: Int? = nil, presencePenalty: Double? = nil, responseFormat: ChatRequestResponseFormat? = nil, seed: Int? = nil, stop: ChatRequestStop? = nil, stream: Bool? = nil, temperature: Double? = nil, topP: Double? = nil, tools: [ChatRequestToolsInner]? = nil, toolChoice: ChatRequestToolChoice? = nil, user: String? = nil) {
        self.messages = messages
        self.frequencyPenalty = frequencyPenalty
        self.logitBias = logitBias
        self.logprobs = logprobs
        self.topLogprobs = topLogprobs
        self.maxTokens = maxTokens
        self.n = n
        self.presencePenalty = presencePenalty
        self.responseFormat = responseFormat
        self.seed = seed
        self.stop = stop
        self.stream = stream
        self.temperature = temperature
        self.topP = topP
        self.tools = tools
        self.toolChoice = toolChoice
        self.user = user
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case messages
        case frequencyPenalty = "frequency_penalty"
        case logitBias = "logit_bias"
        case logprobs
        case topLogprobs = "top_logprobs"
        case maxTokens = "max_tokens"
        case n
        case presencePenalty = "presence_penalty"
        case responseFormat = "response_format"
        case seed
        case stop
        case stream
        case temperature
        case topP = "top_p"
        case tools
        case toolChoice = "tool_choice"
        case user
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(messages, forKey: .messages)
        try container.encodeIfPresent(frequencyPenalty, forKey: .frequencyPenalty)
        try container.encodeIfPresent(logitBias, forKey: .logitBias)
        try container.encodeIfPresent(logprobs, forKey: .logprobs)
        try container.encodeIfPresent(topLogprobs, forKey: .topLogprobs)
        try container.encodeIfPresent(maxTokens, forKey: .maxTokens)
        try container.encodeIfPresent(n, forKey: .n)
        try container.encodeIfPresent(presencePenalty, forKey: .presencePenalty)
        try container.encodeIfPresent(responseFormat, forKey: .responseFormat)
        try container.encodeIfPresent(seed, forKey: .seed)
        try container.encodeIfPresent(stop, forKey: .stop)
        try container.encodeIfPresent(stream, forKey: .stream)
        try container.encodeIfPresent(temperature, forKey: .temperature)
        try container.encodeIfPresent(topP, forKey: .topP)
        try container.encodeIfPresent(tools, forKey: .tools)
        try container.encodeIfPresent(toolChoice, forKey: .toolChoice)
        try container.encodeIfPresent(user, forKey: .user)
    }
}

