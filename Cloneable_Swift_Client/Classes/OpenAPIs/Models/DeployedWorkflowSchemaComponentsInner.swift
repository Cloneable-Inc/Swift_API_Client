//
// DeployedWorkflowSchemaComponentsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DeployedWorkflowSchemaComponentsInner: Codable, JSONEncodable, Hashable {

    public var id: String
    public var availableToAllCompanies: Bool
    public var availableDevices: [String]
    public var builderCompatibility: String
    public var componentId: String
    public var componentType: String
    public var revision: Double
    public var title: String
    public var type: String
    public var userCustomizedTitle: String?
    public var userCustomizedInstructions: String?
    public var dynamicComponentId: String
    public var additionalProperties: [String: AnyCodable]?
    public var nextButtonInBar: Bool?
    public var nextButtonInBarText: String?
    public var iosHwRequirements: [String]?
    public var customizableParameters: [DeployedWorkflowSchemaComponentsInnerCustomizableParametersInner]?
    public var componentDescription: String
    public var dynamicComponentRenderer: Bool
    public var dynamicId: String
    public var useCustomViewForParams: Bool
    public var implementationUrl: String
    public var inputs: [DeployedWorkflowSchemaComponentsInnerInputsInner]?
    public var outputs: [DeployedWorkflowSchemaComponentsInnerOutputsInner]?

    public init(id: String, availableToAllCompanies: Bool, availableDevices: [String], builderCompatibility: String, componentId: String, componentType: String, revision: Double, title: String, type: String, userCustomizedTitle: String? = nil, userCustomizedInstructions: String? = nil, dynamicComponentId: String, additionalProperties: [String: AnyCodable]? = nil, nextButtonInBar: Bool? = nil, nextButtonInBarText: String? = nil, iosHwRequirements: [String]? = nil, customizableParameters: [DeployedWorkflowSchemaComponentsInnerCustomizableParametersInner]? = nil, componentDescription: String, dynamicComponentRenderer: Bool, dynamicId: String, useCustomViewForParams: Bool, implementationUrl: String, inputs: [DeployedWorkflowSchemaComponentsInnerInputsInner]? = nil, outputs: [DeployedWorkflowSchemaComponentsInnerOutputsInner]? = nil) {
        self.id = id
        self.availableToAllCompanies = availableToAllCompanies
        self.availableDevices = availableDevices
        self.builderCompatibility = builderCompatibility
        self.componentId = componentId
        self.componentType = componentType
        self.revision = revision
        self.title = title
        self.type = type
        self.userCustomizedTitle = userCustomizedTitle
        self.userCustomizedInstructions = userCustomizedInstructions
        self.dynamicComponentId = dynamicComponentId
        self.additionalProperties = additionalProperties
        self.nextButtonInBar = nextButtonInBar
        self.nextButtonInBarText = nextButtonInBarText
        self.iosHwRequirements = iosHwRequirements
        self.customizableParameters = customizableParameters
        self.componentDescription = componentDescription
        self.dynamicComponentRenderer = dynamicComponentRenderer
        self.dynamicId = dynamicId
        self.useCustomViewForParams = useCustomViewForParams
        self.implementationUrl = implementationUrl
        self.inputs = inputs
        self.outputs = outputs
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case availableToAllCompanies = "available_to_all_companies"
        case availableDevices = "available_devices"
        case builderCompatibility = "builder_compatibility"
        case componentId = "component_id"
        case componentType = "component_type"
        case revision
        case title
        case type
        case userCustomizedTitle = "user_customized_title"
        case userCustomizedInstructions = "user_customized_instructions"
        case dynamicComponentId = "dynamic_component_id"
        case additionalProperties = "additional_properties"
        case nextButtonInBar = "next_button_in_bar"
        case nextButtonInBarText = "next_button_in_bar_text"
        case iosHwRequirements = "ios_hw_requirements"
        case customizableParameters = "customizable_parameters"
        case componentDescription = "component_description"
        case dynamicComponentRenderer = "dynamic_component_renderer"
        case dynamicId = "dynamic_id"
        case useCustomViewForParams = "use_custom_view_for_params"
        case implementationUrl = "implementation_url"
        case inputs
        case outputs
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(availableToAllCompanies, forKey: .availableToAllCompanies)
        try container.encode(availableDevices, forKey: .availableDevices)
        try container.encode(builderCompatibility, forKey: .builderCompatibility)
        try container.encode(componentId, forKey: .componentId)
        try container.encode(componentType, forKey: .componentType)
        try container.encode(revision, forKey: .revision)
        try container.encode(title, forKey: .title)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(userCustomizedTitle, forKey: .userCustomizedTitle)
        try container.encodeIfPresent(userCustomizedInstructions, forKey: .userCustomizedInstructions)
        try container.encode(dynamicComponentId, forKey: .dynamicComponentId)
        try container.encodeIfPresent(additionalProperties, forKey: .additionalProperties)
        try container.encodeIfPresent(nextButtonInBar, forKey: .nextButtonInBar)
        try container.encodeIfPresent(nextButtonInBarText, forKey: .nextButtonInBarText)
        try container.encodeIfPresent(iosHwRequirements, forKey: .iosHwRequirements)
        try container.encodeIfPresent(customizableParameters, forKey: .customizableParameters)
        try container.encode(componentDescription, forKey: .componentDescription)
        try container.encode(dynamicComponentRenderer, forKey: .dynamicComponentRenderer)
        try container.encode(dynamicId, forKey: .dynamicId)
        try container.encode(useCustomViewForParams, forKey: .useCustomViewForParams)
        try container.encode(implementationUrl, forKey: .implementationUrl)
        try container.encodeIfPresent(inputs, forKey: .inputs)
        try container.encodeIfPresent(outputs, forKey: .outputs)
    }
}

