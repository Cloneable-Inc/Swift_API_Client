//
// ComponentJSONSchemaInputsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ComponentJSONSchemaInputsInner: Codable, JSONEncodable, Hashable {

    public var inputID: String
    public var inputName: String
    public var inputDataType: String
    public var acceptsArray: Bool?
    public var _required: Bool
    public var inputDescription: String
    public var trigger: Bool?
    public var triggerNav: Bool?
    public var group: String?
    public var dynamicInputID: String?

    public init(inputID: String, inputName: String, inputDataType: String, acceptsArray: Bool? = nil, _required: Bool, inputDescription: String, trigger: Bool? = nil, triggerNav: Bool? = nil, group: String? = nil, dynamicInputID: String? = nil) {
        self.inputID = inputID
        self.inputName = inputName
        self.inputDataType = inputDataType
        self.acceptsArray = acceptsArray
        self._required = _required
        self.inputDescription = inputDescription
        self.trigger = trigger
        self.triggerNav = triggerNav
        self.group = group
        self.dynamicInputID = dynamicInputID
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case inputID
        case inputName
        case inputDataType
        case acceptsArray
        case _required = "required"
        case inputDescription
        case trigger
        case triggerNav = "trigger_nav"
        case group
        case dynamicInputID
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(inputID, forKey: .inputID)
        try container.encode(inputName, forKey: .inputName)
        try container.encode(inputDataType, forKey: .inputDataType)
        try container.encodeIfPresent(acceptsArray, forKey: .acceptsArray)
        try container.encode(_required, forKey: ._required)
        try container.encode(inputDescription, forKey: .inputDescription)
        try container.encodeIfPresent(trigger, forKey: .trigger)
        try container.encodeIfPresent(triggerNav, forKey: .triggerNav)
        try container.encodeIfPresent(group, forKey: .group)
        try container.encodeIfPresent(dynamicInputID, forKey: .dynamicInputID)
    }
}

