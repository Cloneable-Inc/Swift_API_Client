//
// TriggerExportRequestOneOf.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TriggerExportRequestOneOf: Codable, JSONEncodable, Hashable {

    public enum ExportType: String, Codable, CaseIterable {
        case node = "node"
        case section = "section"
    }
    public var fileId: String
    public var exportType: ExportType? = .node
    public var nodeUrl: String?
    public var jobId: String?
    public var nodeId: String?
    public var connectionId: String?
    public var sectionId: String?
    public var attachments: [TriggerExportRequestOneOfAttachmentsInner]?

    public init(fileId: String, exportType: ExportType? = .node, nodeUrl: String? = nil, jobId: String? = nil, nodeId: String? = nil, connectionId: String? = nil, sectionId: String? = nil, attachments: [TriggerExportRequestOneOfAttachmentsInner]? = nil) {
        self.fileId = fileId
        self.exportType = exportType
        self.nodeUrl = nodeUrl
        self.jobId = jobId
        self.nodeId = nodeId
        self.connectionId = connectionId
        self.sectionId = sectionId
        self.attachments = attachments
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fileId = "file_id"
        case exportType = "export_type"
        case nodeUrl = "node_url"
        case jobId = "job_id"
        case nodeId = "node_id"
        case connectionId = "connection_id"
        case sectionId = "section_id"
        case attachments
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(fileId, forKey: .fileId)
        try container.encodeIfPresent(exportType, forKey: .exportType)
        try container.encodeIfPresent(nodeUrl, forKey: .nodeUrl)
        try container.encodeIfPresent(jobId, forKey: .jobId)
        try container.encodeIfPresent(nodeId, forKey: .nodeId)
        try container.encodeIfPresent(connectionId, forKey: .connectionId)
        try container.encodeIfPresent(sectionId, forKey: .sectionId)
        try container.encodeIfPresent(attachments, forKey: .attachments)
    }
}

