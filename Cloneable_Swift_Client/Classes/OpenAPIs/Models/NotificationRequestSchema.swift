//
// NotificationRequestSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NotificationRequestSchema: Codable, JSONEncodable, Hashable {

    public enum TargetCompanyRolesChannels: String, Codable, CaseIterable {
        case email = "email"
        case sms = "sms"
        case dashboard = "dashboard"
        case mobilePush = "mobile_push"
    }
    /** ObjectID to create with */
    public var id: String
    public var createdBy: String
    public var companyId: String
    public var workflowId: String
    public var workflowName: String
    public var deployedWorkflowId: String
    public var notificationContent: String
    public var targetCompanyRoles: [String]
    public var targetCompanyRolesChannels: [TargetCompanyRolesChannels]
    public var linkToWorkflow: Bool?
    public var targetEmails: [String]?
    public var targetSmsNumbers: [NotificationRequestSchemaTargetSmsNumbersInner]?
    public var classification: String?

    public init(id: String, createdBy: String, companyId: String, workflowId: String, workflowName: String, deployedWorkflowId: String, notificationContent: String, targetCompanyRoles: [String], targetCompanyRolesChannels: [TargetCompanyRolesChannels], linkToWorkflow: Bool? = nil, targetEmails: [String]? = nil, targetSmsNumbers: [NotificationRequestSchemaTargetSmsNumbersInner]? = nil, classification: String? = nil) {
        self.id = id
        self.createdBy = createdBy
        self.companyId = companyId
        self.workflowId = workflowId
        self.workflowName = workflowName
        self.deployedWorkflowId = deployedWorkflowId
        self.notificationContent = notificationContent
        self.targetCompanyRoles = targetCompanyRoles
        self.targetCompanyRolesChannels = targetCompanyRolesChannels
        self.linkToWorkflow = linkToWorkflow
        self.targetEmails = targetEmails
        self.targetSmsNumbers = targetSmsNumbers
        self.classification = classification
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case createdBy = "created_by"
        case companyId = "company_id"
        case workflowId = "workflow_id"
        case workflowName = "workflow_name"
        case deployedWorkflowId = "deployed_workflow_id"
        case notificationContent = "notification_content"
        case targetCompanyRoles = "target_company_roles"
        case targetCompanyRolesChannels = "target_company_roles_channels"
        case linkToWorkflow = "link_to_workflow"
        case targetEmails = "target_emails"
        case targetSmsNumbers = "target_sms_numbers"
        case classification
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(companyId, forKey: .companyId)
        try container.encode(workflowId, forKey: .workflowId)
        try container.encode(workflowName, forKey: .workflowName)
        try container.encode(deployedWorkflowId, forKey: .deployedWorkflowId)
        try container.encode(notificationContent, forKey: .notificationContent)
        try container.encode(targetCompanyRoles, forKey: .targetCompanyRoles)
        try container.encode(targetCompanyRolesChannels, forKey: .targetCompanyRolesChannels)
        try container.encodeIfPresent(linkToWorkflow, forKey: .linkToWorkflow)
        try container.encodeIfPresent(targetEmails, forKey: .targetEmails)
        try container.encodeIfPresent(targetSmsNumbers, forKey: .targetSmsNumbers)
        try container.encodeIfPresent(classification, forKey: .classification)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension NotificationRequestSchema: Identifiable {}
