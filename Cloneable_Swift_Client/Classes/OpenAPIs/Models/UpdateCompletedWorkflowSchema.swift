//
// UpdateCompletedWorkflowSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateCompletedWorkflowSchema: Codable, JSONEncodable, Hashable {

    public var name: String
    public var finalized: Bool
    public var finalizedAt: String?
    public var updatedAt: Date?
    public var typeRefId: String
    public var relatedObjectTypes: [CompletedWorkflowSchemaRelatedObjectTypesInner]?
    public var relatedWorkflowTemplateId: String
    public var auditTimeline: [CompletedWorkflowSchemaAuditTimelineInner]?

    public init(name: String, finalized: Bool, finalizedAt: String? = nil, updatedAt: Date? = nil, typeRefId: String, relatedObjectTypes: [CompletedWorkflowSchemaRelatedObjectTypesInner]? = nil, relatedWorkflowTemplateId: String, auditTimeline: [CompletedWorkflowSchemaAuditTimelineInner]? = nil) {
        self.name = name
        self.finalized = finalized
        self.finalizedAt = finalizedAt
        self.updatedAt = updatedAt
        self.typeRefId = typeRefId
        self.relatedObjectTypes = relatedObjectTypes
        self.relatedWorkflowTemplateId = relatedWorkflowTemplateId
        self.auditTimeline = auditTimeline
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case finalized
        case finalizedAt = "finalized_at"
        case updatedAt = "updated_at"
        case typeRefId = "type_ref_id"
        case relatedObjectTypes = "related_object_types"
        case relatedWorkflowTemplateId = "related_workflow_template_id"
        case auditTimeline = "audit_timeline"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(name, forKey: .name)
        try container.encode(finalized, forKey: .finalized)
        try container.encodeIfPresent(finalizedAt, forKey: .finalizedAt)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encode(typeRefId, forKey: .typeRefId)
        try container.encodeIfPresent(relatedObjectTypes, forKey: .relatedObjectTypes)
        try container.encode(relatedWorkflowTemplateId, forKey: .relatedWorkflowTemplateId)
        try container.encodeIfPresent(auditTimeline, forKey: .auditTimeline)
    }
}

