//
// GetDataObjectsPagedFiltersParameter.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GetDataObjectsPagedFiltersParameter: Codable, JSONEncodable, Hashable {

    public var companyId: String?
    public var createdBy: String?
    public var createdAt: GetManyFilesFiltersParameterCreatedAt?
    public var objectTemplateId: [String]?
    public var typeRefId: String?
    public var active: Bool?
    public var environment: String?
    public var search: String?
    public var id: [String]?

    public init(companyId: String? = nil, createdBy: String? = nil, createdAt: GetManyFilesFiltersParameterCreatedAt? = nil, objectTemplateId: [String]? = nil, typeRefId: String? = nil, active: Bool? = nil, environment: String? = nil, search: String? = nil, id: [String]? = nil) {
        self.companyId = companyId
        self.createdBy = createdBy
        self.createdAt = createdAt
        self.objectTemplateId = objectTemplateId
        self.typeRefId = typeRefId
        self.active = active
        self.environment = environment
        self.search = search
        self.id = id
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case companyId = "company_id"
        case createdBy = "created_by"
        case createdAt = "created_at"
        case objectTemplateId = "object_template_id"
        case typeRefId = "type_ref_id"
        case active
        case environment
        case search
        case id
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(companyId, forKey: .companyId)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(objectTemplateId, forKey: .objectTemplateId)
        try container.encodeIfPresent(typeRefId, forKey: .typeRefId)
        try container.encodeIfPresent(active, forKey: .active)
        try container.encodeIfPresent(environment, forKey: .environment)
        try container.encodeIfPresent(search, forKey: .search)
        try container.encodeIfPresent(id, forKey: .id)
    }
}

