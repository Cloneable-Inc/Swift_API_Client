//
// CreateDataObjectHistorySchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateDataObjectHistorySchema: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var dataObjectId: String
    public var dataObjectTemplateNameId: String
    public var key: String
    public var value: AnyCodable?
    public var type: String
    public var label: String?
    public var teamId: String?
    public var metaData: SyncDataObjectRequestInnerMetaData

    public init(id: UUID? = nil, dataObjectId: String, dataObjectTemplateNameId: String, key: String, value: AnyCodable? = nil, type: String, label: String? = nil, teamId: String? = nil, metaData: SyncDataObjectRequestInnerMetaData) {
        self.id = id
        self.dataObjectId = dataObjectId
        self.dataObjectTemplateNameId = dataObjectTemplateNameId
        self.key = key
        self.value = value
        self.type = type
        self.label = label
        self.teamId = teamId
        self.metaData = metaData
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case dataObjectId = "data_object_id"
        case dataObjectTemplateNameId = "data_object_template_name_id"
        case key
        case value
        case type
        case label
        case teamId = "team_id"
        case metaData = "meta_data"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(dataObjectId, forKey: .dataObjectId)
        try container.encode(dataObjectTemplateNameId, forKey: .dataObjectTemplateNameId)
        try container.encode(key, forKey: .key)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(label, forKey: .label)
        try container.encodeIfPresent(teamId, forKey: .teamId)
        try container.encode(metaData, forKey: .metaData)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension CreateDataObjectHistorySchema: Identifiable {}
