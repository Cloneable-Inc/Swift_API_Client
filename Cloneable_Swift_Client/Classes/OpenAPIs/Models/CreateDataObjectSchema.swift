//
// CreateDataObjectSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct CreateDataObjectSchema: Codable, JSONEncodable, Hashable {

    public var companyId: String
    public var createdAt: String
    public var createdBy: String
    public var dynamicObjectId: String
    public var fields: [DataObjectSchemaFieldsInner]
    public var instanceObjectId: String
    public var modifiedAt: String
    public var objectDescription: String
    public var objectDisplayName: String
    public var objectId: String
    public var objectName: String
    public var objectRevision: Double
    public var objectTemplateRevision: Double
    public var relatedWorkflowInstanceIds: [DataObjectSchemaRelatedWorkflowInstanceIdsInner]?
    public var typeRefId: String

    public init(companyId: String, createdAt: String, createdBy: String, dynamicObjectId: String, fields: [DataObjectSchemaFieldsInner], instanceObjectId: String, modifiedAt: String, objectDescription: String, objectDisplayName: String, objectId: String, objectName: String, objectRevision: Double, objectTemplateRevision: Double, relatedWorkflowInstanceIds: [DataObjectSchemaRelatedWorkflowInstanceIdsInner]? = nil, typeRefId: String) {
        self.companyId = companyId
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.dynamicObjectId = dynamicObjectId
        self.fields = fields
        self.instanceObjectId = instanceObjectId
        self.modifiedAt = modifiedAt
        self.objectDescription = objectDescription
        self.objectDisplayName = objectDisplayName
        self.objectId = objectId
        self.objectName = objectName
        self.objectRevision = objectRevision
        self.objectTemplateRevision = objectTemplateRevision
        self.relatedWorkflowInstanceIds = relatedWorkflowInstanceIds
        self.typeRefId = typeRefId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case companyId = "company_id"
        case createdAt = "created_at"
        case createdBy = "created_by"
        case dynamicObjectId = "dynamic_object_id"
        case fields
        case instanceObjectId = "instance_object_id"
        case modifiedAt = "modified_at"
        case objectDescription = "object_description"
        case objectDisplayName = "object_display_name"
        case objectId = "object_id"
        case objectName = "object_name"
        case objectRevision = "object_revision"
        case objectTemplateRevision = "object_template_revision"
        case relatedWorkflowInstanceIds = "related_workflow_instance_ids"
        case typeRefId = "type_ref_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(companyId, forKey: .companyId)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(dynamicObjectId, forKey: .dynamicObjectId)
        try container.encode(fields, forKey: .fields)
        try container.encode(instanceObjectId, forKey: .instanceObjectId)
        try container.encode(modifiedAt, forKey: .modifiedAt)
        try container.encode(objectDescription, forKey: .objectDescription)
        try container.encode(objectDisplayName, forKey: .objectDisplayName)
        try container.encode(objectId, forKey: .objectId)
        try container.encode(objectName, forKey: .objectName)
        try container.encode(objectRevision, forKey: .objectRevision)
        try container.encode(objectTemplateRevision, forKey: .objectTemplateRevision)
        try container.encodeIfPresent(relatedWorkflowInstanceIds, forKey: .relatedWorkflowInstanceIds)
        try container.encode(typeRefId, forKey: .typeRefId)
    }
}

