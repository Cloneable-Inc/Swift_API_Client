//
// InsertTriggerExecutionSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InsertTriggerExecutionSchema: Codable, JSONEncodable, Hashable {

    public var id: UUID?
    public var triggerId: UUID
    public var status: String
    public var startedAt: Date?
    public var completedAt: Date?
    public var error: String?
    public var inputs: InsertTriggerExecutionSchemaInputs
    public var outputs: InsertTriggerExecutionSchemaInputs
    public var metadata: InsertTriggerExecutionSchemaMetadata
    public var resourceUsage: InsertTriggerExecutionSchemaResourceUsage

    public init(id: UUID? = nil, triggerId: UUID, status: String, startedAt: Date? = nil, completedAt: Date? = nil, error: String? = nil, inputs: InsertTriggerExecutionSchemaInputs, outputs: InsertTriggerExecutionSchemaInputs, metadata: InsertTriggerExecutionSchemaMetadata, resourceUsage: InsertTriggerExecutionSchemaResourceUsage) {
        self.id = id
        self.triggerId = triggerId
        self.status = status
        self.startedAt = startedAt
        self.completedAt = completedAt
        self.error = error
        self.inputs = inputs
        self.outputs = outputs
        self.metadata = metadata
        self.resourceUsage = resourceUsage
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case triggerId = "trigger_id"
        case status
        case startedAt = "started_at"
        case completedAt = "completed_at"
        case error
        case inputs
        case outputs
        case metadata
        case resourceUsage = "resource_usage"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(triggerId, forKey: .triggerId)
        try container.encode(status, forKey: .status)
        try container.encodeIfPresent(startedAt, forKey: .startedAt)
        try container.encodeIfPresent(completedAt, forKey: .completedAt)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encode(inputs, forKey: .inputs)
        try container.encode(outputs, forKey: .outputs)
        try container.encode(metadata, forKey: .metadata)
        try container.encode(resourceUsage, forKey: .resourceUsage)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension InsertTriggerExecutionSchema: Identifiable {}
