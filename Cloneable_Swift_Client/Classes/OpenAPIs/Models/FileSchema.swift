//
// FileSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct FileSchema: Codable, JSONEncodable, Hashable {

    public var id: String
    public var relatedObjectId: String?
    public var relatedWorkflowId: String?
    public var typeRefIds: [String]?
    public var company: String
    public var contentType: String
    public var createdAt: String
    public var createdBy: String
    public var _extension: String
    public var name: String
    public var displayName: String
    public var size: Double
    public var type: String
    public var url: String
    public var savedToCloud: Bool
    public var storageAuthProviderName: String
    public var storageAuthProviderRefID: String
    public var storageProvider: String
    public var syncToEdge: Bool
    public var typeRefID: String?
    public var additionalProperties: FileSchemaAdditionalProperties?

    public init(id: String, relatedObjectId: String? = nil, relatedWorkflowId: String? = nil, typeRefIds: [String]? = nil, company: String, contentType: String, createdAt: String, createdBy: String, _extension: String, name: String, displayName: String, size: Double, type: String, url: String, savedToCloud: Bool, storageAuthProviderName: String, storageAuthProviderRefID: String, storageProvider: String, syncToEdge: Bool, typeRefID: String? = nil, additionalProperties: FileSchemaAdditionalProperties? = nil) {
        self.id = id
        self.relatedObjectId = relatedObjectId
        self.relatedWorkflowId = relatedWorkflowId
        self.typeRefIds = typeRefIds
        self.company = company
        self.contentType = contentType
        self.createdAt = createdAt
        self.createdBy = createdBy
        self._extension = _extension
        self.name = name
        self.displayName = displayName
        self.size = size
        self.type = type
        self.url = url
        self.savedToCloud = savedToCloud
        self.storageAuthProviderName = storageAuthProviderName
        self.storageAuthProviderRefID = storageAuthProviderRefID
        self.storageProvider = storageProvider
        self.syncToEdge = syncToEdge
        self.typeRefID = typeRefID
        self.additionalProperties = additionalProperties
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case relatedObjectId = "related_object_id"
        case relatedWorkflowId = "related_workflow_id"
        case typeRefIds = "type_ref_ids"
        case company
        case contentType = "content_type"
        case createdAt = "created_at"
        case createdBy = "created_by"
        case _extension = "extension"
        case name
        case displayName = "display_name"
        case size
        case type
        case url
        case savedToCloud = "saved_to_cloud"
        case storageAuthProviderName = "storage_auth_provider_name"
        case storageAuthProviderRefID = "storage_auth_provider_ref_ID"
        case storageProvider = "storage_provider"
        case syncToEdge = "sync_to_edge"
        case typeRefID = "type_ref_ID"
        case additionalProperties = "additional_properties"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(relatedObjectId, forKey: .relatedObjectId)
        try container.encodeIfPresent(relatedWorkflowId, forKey: .relatedWorkflowId)
        try container.encodeIfPresent(typeRefIds, forKey: .typeRefIds)
        try container.encode(company, forKey: .company)
        try container.encode(contentType, forKey: .contentType)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(_extension, forKey: ._extension)
        try container.encode(name, forKey: .name)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(size, forKey: .size)
        try container.encode(type, forKey: .type)
        try container.encode(url, forKey: .url)
        try container.encode(savedToCloud, forKey: .savedToCloud)
        try container.encode(storageAuthProviderName, forKey: .storageAuthProviderName)
        try container.encode(storageAuthProviderRefID, forKey: .storageAuthProviderRefID)
        try container.encode(storageProvider, forKey: .storageProvider)
        try container.encode(syncToEdge, forKey: .syncToEdge)
        try container.encodeIfPresent(typeRefID, forKey: .typeRefID)
        try container.encodeIfPresent(additionalProperties, forKey: .additionalProperties)
    }
}

