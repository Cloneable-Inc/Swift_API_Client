//
// ComponentJSONSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ComponentJSONSchema: Codable, JSONEncodable, Hashable {

    public enum ComponentType: String, Codable, CaseIterable {
        case ui = "ui"
        case iosWorkflowStart = "ios_workflow_start"
        case processing = "processing"
        case logical = "logical"
        case fileDataType = "file_data_type"
        case cloudWorkflowStart = "cloud_workflow_start"
        case cloudWorkflowEnd = "cloud_workflow_end"
        case iosWorkflowEnd = "ios_workflow_end"
    }
    public var title: String
    public var componentID: String
    public var dynamicComponentID: String?
    public var componentType: ComponentType
    public var revision: Double
    public var availableDevices: [String]
    public var implementationURL: String
    public var builderCompatibility: String
    public var availableToAllCompanies: Bool
    public var useCustomViewForParams: Bool?
    public var componentDescription: String
    public var defaultDrawerSize: String?
    public var nextButtonInBar: Bool?
    public var nextButtonInBarText: String?
    public var docsUrl: String?
    public var iosHWRequirements: [String]?
    public var outputs: [ComponentJSONSchemaOutputsInner]?
    public var inputs: [ComponentJSONSchemaInputsInner]?
    public var dynamicComponentRenderer: Bool
    public var customizableParameters: [ComponentJSONSchemaCustomizableParametersInner]?
    public var additionalProperties: AnyCodable?
    public var resources: ComponentJSONSchemaResources?
    public var code: String?
    public var target: String?

    public init(title: String, componentID: String, dynamicComponentID: String? = nil, componentType: ComponentType, revision: Double, availableDevices: [String], implementationURL: String, builderCompatibility: String, availableToAllCompanies: Bool, useCustomViewForParams: Bool? = nil, componentDescription: String, defaultDrawerSize: String? = nil, nextButtonInBar: Bool? = nil, nextButtonInBarText: String? = nil, docsUrl: String? = nil, iosHWRequirements: [String]? = nil, outputs: [ComponentJSONSchemaOutputsInner]? = nil, inputs: [ComponentJSONSchemaInputsInner]? = nil, dynamicComponentRenderer: Bool, customizableParameters: [ComponentJSONSchemaCustomizableParametersInner]? = nil, additionalProperties: AnyCodable? = nil, resources: ComponentJSONSchemaResources? = nil, code: String? = nil, target: String? = nil) {
        self.title = title
        self.componentID = componentID
        self.dynamicComponentID = dynamicComponentID
        self.componentType = componentType
        self.revision = revision
        self.availableDevices = availableDevices
        self.implementationURL = implementationURL
        self.builderCompatibility = builderCompatibility
        self.availableToAllCompanies = availableToAllCompanies
        self.useCustomViewForParams = useCustomViewForParams
        self.componentDescription = componentDescription
        self.defaultDrawerSize = defaultDrawerSize
        self.nextButtonInBar = nextButtonInBar
        self.nextButtonInBarText = nextButtonInBarText
        self.docsUrl = docsUrl
        self.iosHWRequirements = iosHWRequirements
        self.outputs = outputs
        self.inputs = inputs
        self.dynamicComponentRenderer = dynamicComponentRenderer
        self.customizableParameters = customizableParameters
        self.additionalProperties = additionalProperties
        self.resources = resources
        self.code = code
        self.target = target
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case title
        case componentID
        case dynamicComponentID
        case componentType
        case revision
        case availableDevices = "available_devices"
        case implementationURL = "implementation_URL"
        case builderCompatibility = "builder_compatibility"
        case availableToAllCompanies
        case useCustomViewForParams
        case componentDescription
        case defaultDrawerSize
        case nextButtonInBar
        case nextButtonInBarText
        case docsUrl = "docs_url"
        case iosHWRequirements
        case outputs
        case inputs
        case dynamicComponentRenderer
        case customizableParameters
        case additionalProperties
        case resources
        case code
        case target
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(title, forKey: .title)
        try container.encode(componentID, forKey: .componentID)
        try container.encodeIfPresent(dynamicComponentID, forKey: .dynamicComponentID)
        try container.encode(componentType, forKey: .componentType)
        try container.encode(revision, forKey: .revision)
        try container.encode(availableDevices, forKey: .availableDevices)
        try container.encode(implementationURL, forKey: .implementationURL)
        try container.encode(builderCompatibility, forKey: .builderCompatibility)
        try container.encode(availableToAllCompanies, forKey: .availableToAllCompanies)
        try container.encodeIfPresent(useCustomViewForParams, forKey: .useCustomViewForParams)
        try container.encode(componentDescription, forKey: .componentDescription)
        try container.encodeIfPresent(defaultDrawerSize, forKey: .defaultDrawerSize)
        try container.encodeIfPresent(nextButtonInBar, forKey: .nextButtonInBar)
        try container.encodeIfPresent(nextButtonInBarText, forKey: .nextButtonInBarText)
        try container.encodeIfPresent(docsUrl, forKey: .docsUrl)
        try container.encodeIfPresent(iosHWRequirements, forKey: .iosHWRequirements)
        try container.encodeIfPresent(outputs, forKey: .outputs)
        try container.encodeIfPresent(inputs, forKey: .inputs)
        try container.encode(dynamicComponentRenderer, forKey: .dynamicComponentRenderer)
        try container.encodeIfPresent(customizableParameters, forKey: .customizableParameters)
        try container.encodeIfPresent(additionalProperties, forKey: .additionalProperties)
        try container.encodeIfPresent(resources, forKey: .resources)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(target, forKey: .target)
    }
}

