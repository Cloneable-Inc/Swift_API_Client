//
// DataObjectTemplateSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DataObjectTemplateSchema: Codable, JSONEncodable, Hashable {

    public var id: String
    public var objectId: String
    public var companyId: String
    public var createdAt: Date
    public var createdBy: String
    public var fields: [DataObjectTemplateSchemaFieldsInner]?
    public var modifiedAt: Date
    public var objectDescription: String
    public var objectDisplayName: String
    public var objectName: String
    public var revision: Double
    public var typeRefId: String?
    public var isTemplate: Bool

    public init(id: String, objectId: String, companyId: String, createdAt: Date, createdBy: String, fields: [DataObjectTemplateSchemaFieldsInner]? = nil, modifiedAt: Date, objectDescription: String, objectDisplayName: String, objectName: String, revision: Double, typeRefId: String? = nil, isTemplate: Bool) {
        self.id = id
        self.objectId = objectId
        self.companyId = companyId
        self.createdAt = createdAt
        self.createdBy = createdBy
        self.fields = fields
        self.modifiedAt = modifiedAt
        self.objectDescription = objectDescription
        self.objectDisplayName = objectDisplayName
        self.objectName = objectName
        self.revision = revision
        self.typeRefId = typeRefId
        self.isTemplate = isTemplate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case objectId = "object_id"
        case companyId = "company_id"
        case createdAt = "created_at"
        case createdBy = "created_by"
        case fields
        case modifiedAt = "modified_at"
        case objectDescription = "object_description"
        case objectDisplayName = "object_display_name"
        case objectName = "object_name"
        case revision
        case typeRefId = "type_ref_id"
        case isTemplate = "is_template"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(objectId, forKey: .objectId)
        try container.encode(companyId, forKey: .companyId)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encodeIfPresent(fields, forKey: .fields)
        try container.encode(modifiedAt, forKey: .modifiedAt)
        try container.encode(objectDescription, forKey: .objectDescription)
        try container.encode(objectDisplayName, forKey: .objectDisplayName)
        try container.encode(objectName, forKey: .objectName)
        try container.encode(revision, forKey: .revision)
        try container.encodeIfPresent(typeRefId, forKey: .typeRefId)
        try container.encode(isTemplate, forKey: .isTemplate)
    }
}

