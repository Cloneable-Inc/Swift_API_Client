//
// TriggerSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TriggerSchema: Codable, JSONEncodable, Hashable {

    public static let executionWaitTimeRule = NumericRule<Int>(minimum: -2147483648, exclusiveMinimum: false, maximum: 2147483647, exclusiveMaximum: false, multipleOf: nil)
    public var id: UUID
    public var name: String
    public var description: String?
    public var type: String
    public var enabled: Bool
    public var archived: Bool
    public var code: String?
    public var runtime: String
    public var schedule: String?
    public var executionType: String
    public var executionWaitTime: Int?
    public var environmentVariables: [String: String]?
    public var resourceLimits: InsertTriggerSchemaResourceLimits?
    public var inputSchema: InsertTriggerSchemaInputSchema?
    public var outputSchema: InsertTriggerSchemaInputSchema?
    public var state: [String: AnyCodable]?
    public var createdAt: Date
    public var updatedAt: Date

    public init(id: UUID, name: String, description: String?, type: String, enabled: Bool, archived: Bool, code: String?, runtime: String, schedule: String?, executionType: String, executionWaitTime: Int?, environmentVariables: [String: String]?, resourceLimits: InsertTriggerSchemaResourceLimits?, inputSchema: InsertTriggerSchemaInputSchema?, outputSchema: InsertTriggerSchemaInputSchema?, state: [String: AnyCodable]?, createdAt: Date, updatedAt: Date) {
        self.id = id
        self.name = name
        self.description = description
        self.type = type
        self.enabled = enabled
        self.archived = archived
        self.code = code
        self.runtime = runtime
        self.schedule = schedule
        self.executionType = executionType
        self.executionWaitTime = executionWaitTime
        self.environmentVariables = environmentVariables
        self.resourceLimits = resourceLimits
        self.inputSchema = inputSchema
        self.outputSchema = outputSchema
        self.state = state
        self.createdAt = createdAt
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case description
        case type
        case enabled
        case archived
        case code
        case runtime
        case schedule
        case executionType = "execution_type"
        case executionWaitTime = "execution_wait_time"
        case environmentVariables = "environment_variables"
        case resourceLimits = "resource_limits"
        case inputSchema = "input_schema"
        case outputSchema = "output_schema"
        case state
        case createdAt = "created_at"
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(description, forKey: .description)
        try container.encode(type, forKey: .type)
        try container.encode(enabled, forKey: .enabled)
        try container.encode(archived, forKey: .archived)
        try container.encode(code, forKey: .code)
        try container.encode(runtime, forKey: .runtime)
        try container.encode(schedule, forKey: .schedule)
        try container.encode(executionType, forKey: .executionType)
        try container.encode(executionWaitTime, forKey: .executionWaitTime)
        try container.encode(environmentVariables, forKey: .environmentVariables)
        try container.encode(resourceLimits, forKey: .resourceLimits)
        try container.encode(inputSchema, forKey: .inputSchema)
        try container.encode(outputSchema, forKey: .outputSchema)
        try container.encode(state, forKey: .state)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension TriggerSchema: Identifiable {}
