//
// TriggerAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class TriggerAPI {

    /**
     Attach a secret to a trigger
     
     - parameter id: (path)  
     - parameter secretId: (path)  
     - parameter body: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func attachSecret(id: String, secretId: String, body: AnyCodable? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateFile400Response?, _ error: Error?) -> Void)) -> RequestTask {
        return attachSecretWithRequestBuilder(id: id, secretId: secretId, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Attach a secret to a trigger
     - POST /trigger/{id}/secrets/{secret_id}
     - parameter id: (path)  
     - parameter secretId: (path)  
     - parameter body: (body) Body (optional)
     - returns: RequestBuilder<CreateFile400Response> 
     */
    open class func attachSecretWithRequestBuilder(id: String, secretId: String, body: AnyCodable? = nil) -> RequestBuilder<CreateFile400Response> {
        var localVariablePath = "/trigger/{id}/secrets/{secret_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let secretIdPreEscape = "\(APIHelper.mapValueToPathItem(secretId))"
        let secretIdPostEscape = secretIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{secret_id}", with: secretIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateFile400Response>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Create a new trigger
     
     - parameter createTriggerRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createTrigger(createTriggerRequest: CreateTriggerRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TriggerSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return createTriggerWithRequestBuilder(createTriggerRequest: createTriggerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new trigger
     - POST /trigger
     - parameter createTriggerRequest: (body) Body (optional)
     - returns: RequestBuilder<TriggerSchema> 
     */
    open class func createTriggerWithRequestBuilder(createTriggerRequest: CreateTriggerRequest? = nil) -> RequestBuilder<TriggerSchema> {
        let localVariablePath = "/trigger"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createTriggerRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TriggerSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete a trigger
     
     - parameter id: (path)  
     - parameter body: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteTrigger(id: String, body: AnyCodable? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeleteTrigger200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteTriggerWithRequestBuilder(id: id, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a trigger
     - DELETE /trigger/{id}
     - parameter id: (path)  
     - parameter body: (body) Body (optional)
     - returns: RequestBuilder<DeleteTrigger200Response> 
     */
    open class func deleteTriggerWithRequestBuilder(id: String, body: AnyCodable? = nil) -> RequestBuilder<DeleteTrigger200Response> {
        var localVariablePath = "/trigger/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeleteTrigger200Response>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Remove a secret from a trigger
     
     - parameter id: (path)  
     - parameter secretId: (path)  
     - parameter body: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func detachSecret(id: String, secretId: String, body: AnyCodable? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateFile400Response?, _ error: Error?) -> Void)) -> RequestTask {
        return detachSecretWithRequestBuilder(id: id, secretId: secretId, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a secret from a trigger
     - DELETE /trigger/{id}/secrets/{secret_id}
     - parameter id: (path)  
     - parameter secretId: (path)  
     - parameter body: (body) Body (optional)
     - returns: RequestBuilder<CreateFile400Response> 
     */
    open class func detachSecretWithRequestBuilder(id: String, secretId: String, body: AnyCodable? = nil) -> RequestBuilder<CreateFile400Response> {
        var localVariablePath = "/trigger/{id}/secrets/{secret_id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let secretIdPreEscape = "\(APIHelper.mapValueToPathItem(secretId))"
        let secretIdPostEscape = secretIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{secret_id}", with: secretIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateFile400Response>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get logs for a specific execution
     
     - parameter executionId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getExecutionLogs(executionId: String, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TriggerLogSchema]?, _ error: Error?) -> Void)) -> RequestTask {
        return getExecutionLogsWithRequestBuilder(executionId: executionId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get logs for a specific execution
     - GET /trigger/execution/{execution_id}/logs
     - parameter executionId: (path)  
     - returns: RequestBuilder<[TriggerLogSchema]> 
     */
    open class func getExecutionLogsWithRequestBuilder(executionId: String) -> RequestBuilder<[TriggerLogSchema]> {
        var localVariablePath = "/trigger/execution/{execution_id}/logs"
        let executionIdPreEscape = "\(APIHelper.mapValueToPathItem(executionId))"
        let executionIdPostEscape = executionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{execution_id}", with: executionIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TriggerLogSchema]>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a single trigger by ID
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOneTrigger(id: String, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TriggerSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return getOneTriggerWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a single trigger by ID
     - GET /trigger/{id}
     - parameter id: (path)  
     - returns: RequestBuilder<TriggerSchema> 
     */
    open class func getOneTriggerWithRequestBuilder(id: String) -> RequestBuilder<TriggerSchema> {
        var localVariablePath = "/trigger/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TriggerSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get execution history for a trigger
     
     - parameter id: (path)  
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTriggerExecutions(id: String, limit: Double? = nil, offset: Double? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TriggerExecutionSchema]?, _ error: Error?) -> Void)) -> RequestTask {
        return getTriggerExecutionsWithRequestBuilder(id: id, limit: limit, offset: offset).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get execution history for a trigger
     - GET /trigger/{id}/executions
     - parameter id: (path)  
     - parameter limit: (query)  (optional)
     - parameter offset: (query)  (optional)
     - returns: RequestBuilder<[TriggerExecutionSchema]> 
     */
    open class func getTriggerExecutionsWithRequestBuilder(id: String, limit: Double? = nil, offset: Double? = nil) -> RequestBuilder<[TriggerExecutionSchema]> {
        var localVariablePath = "/trigger/{id}/executions"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": (wrappedValue: limit?.encodeToJSON(), isExplode: true),
            "offset": (wrappedValue: offset?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TriggerExecutionSchema]>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get all secrets attached to a trigger
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTriggerSecrets(id: String, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [GetTriggerSecrets200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return getTriggerSecretsWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all secrets attached to a trigger
     - GET /trigger/{id}/secrets
     - parameter id: (path)  
     - returns: RequestBuilder<[GetTriggerSecrets200ResponseInner]> 
     */
    open class func getTriggerSecretsWithRequestBuilder(id: String) -> RequestBuilder<[GetTriggerSecrets200ResponseInner]> {
        var localVariablePath = "/trigger/{id}/secrets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[GetTriggerSecrets200ResponseInner]>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get all triggers for organization
     
     - parameter minimal: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTriggers(minimal: Bool? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [TriggerSchema]?, _ error: Error?) -> Void)) -> RequestTask {
        return getTriggersWithRequestBuilder(minimal: minimal).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all triggers for organization
     - GET /triggers
     - parameter minimal: (query)  (optional)
     - returns: RequestBuilder<[TriggerSchema]> 
     */
    open class func getTriggersWithRequestBuilder(minimal: Bool? = nil) -> RequestBuilder<[TriggerSchema]> {
        let localVariablePath = "/triggers"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "minimal": (wrappedValue: minimal?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[TriggerSchema]>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Manually execute a trigger
     
     - parameter id: (path)  
     - parameter runTriggerRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func runTrigger(id: String, runTriggerRequest: RunTriggerRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TriggerExecutionSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return runTriggerWithRequestBuilder(id: id, runTriggerRequest: runTriggerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Manually execute a trigger
     - POST /trigger/{id}/run
     - parameter id: (path)  
     - parameter runTriggerRequest: (body) Body (optional)
     - returns: RequestBuilder<TriggerExecutionSchema> 
     */
    open class func runTriggerWithRequestBuilder(id: String, runTriggerRequest: RunTriggerRequest? = nil) -> RequestBuilder<TriggerExecutionSchema> {
        var localVariablePath = "/trigger/{id}/run"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: runTriggerRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TriggerExecutionSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Start a trigger container
     
     - parameter id: (path)  
     - parameter body: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func triggerExecutionStart(id: String, body: AnyCodable? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TriggerExecutionStart200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return triggerExecutionStartWithRequestBuilder(id: id, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Start a trigger container
     - POST /trigger/{id}/execution/start
     - parameter id: (path)  
     - parameter body: (body) Body (optional)
     - returns: RequestBuilder<TriggerExecutionStart200Response> 
     */
    open class func triggerExecutionStartWithRequestBuilder(id: String, body: AnyCodable? = nil) -> RequestBuilder<TriggerExecutionStart200Response> {
        var localVariablePath = "/trigger/{id}/execution/start"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TriggerExecutionStart200Response>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Stop a trigger container
     
     - parameter id: (path)  
     - parameter triggerExecutionStopRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func triggerExecutionStop(id: String, triggerExecutionStopRequest: TriggerExecutionStopRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateFile400Response?, _ error: Error?) -> Void)) -> RequestTask {
        return triggerExecutionStopWithRequestBuilder(id: id, triggerExecutionStopRequest: triggerExecutionStopRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Stop a trigger container
     - POST /trigger/{id}/execution/stop
     - parameter id: (path)  
     - parameter triggerExecutionStopRequest: (body) Body (optional)
     - returns: RequestBuilder<CreateFile400Response> 
     */
    open class func triggerExecutionStopWithRequestBuilder(id: String, triggerExecutionStopRequest: TriggerExecutionStopRequest? = nil) -> RequestBuilder<CreateFile400Response> {
        var localVariablePath = "/trigger/{id}/execution/stop"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: triggerExecutionStopRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateFile400Response>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update an existing trigger
     
     - parameter id: (path)  
     - parameter updateTriggerRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateTrigger(id: String, updateTriggerRequest: UpdateTriggerRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TriggerSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return updateTriggerWithRequestBuilder(id: id, updateTriggerRequest: updateTriggerRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an existing trigger
     - PUT /trigger/{id}
     - parameter id: (path)  
     - parameter updateTriggerRequest: (body) Body (optional)
     - returns: RequestBuilder<TriggerSchema> 
     */
    open class func updateTriggerWithRequestBuilder(id: String, updateTriggerRequest: UpdateTriggerRequest? = nil) -> RequestBuilder<TriggerSchema> {
        var localVariablePath = "/trigger/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateTriggerRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TriggerSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update all secrets for a trigger
     
     - parameter id: (path)  
     - parameter updateTriggerSecretsRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateTriggerSecrets(id: String, updateTriggerSecretsRequest: UpdateTriggerSecretsRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [GetTriggerSecrets200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return updateTriggerSecretsWithRequestBuilder(id: id, updateTriggerSecretsRequest: updateTriggerSecretsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update all secrets for a trigger
     - PUT /trigger/{id}/secrets
     - parameter id: (path)  
     - parameter updateTriggerSecretsRequest: (body) Body (optional)
     - returns: RequestBuilder<[GetTriggerSecrets200ResponseInner]> 
     */
    open class func updateTriggerSecretsWithRequestBuilder(id: String, updateTriggerSecretsRequest: UpdateTriggerSecretsRequest? = nil) -> RequestBuilder<[GetTriggerSecrets200ResponseInner]> {
        var localVariablePath = "/trigger/{id}/secrets"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateTriggerSecretsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[GetTriggerSecrets200ResponseInner]>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
