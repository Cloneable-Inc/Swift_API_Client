//
// DeployedWorfklowAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DeployedWorfklowAPI {

    /**
     Get all deployed workflows
     
     - parameter getDeployedWorkflowsRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getDeployedWorkflows(getDeployedWorkflowsRequest: GetDeployedWorkflowsRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [DeployedWorkflowSchema]?, _ error: Error?) -> Void)) -> RequestTask {
        return getDeployedWorkflowsWithRequestBuilder(getDeployedWorkflowsRequest: getDeployedWorkflowsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all deployed workflows
     - POST /deployed-workflows
     - parameter getDeployedWorkflowsRequest: (body) Body (optional)
     - returns: RequestBuilder<[DeployedWorkflowSchema]> 
     */
    open class func getDeployedWorkflowsWithRequestBuilder(getDeployedWorkflowsRequest: GetDeployedWorkflowsRequest? = nil) -> RequestBuilder<[DeployedWorkflowSchema]> {
        let localVariablePath = "/deployed-workflows"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getDeployedWorkflowsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[DeployedWorkflowSchema]>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Returns a deployed workflow by id
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOneDeployedWorkflow(id: String, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeployedWorkflowSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return getOneDeployedWorkflowWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns a deployed workflow by id
     - GET /deployed-workflow/{id}
     - parameter id: (path)  
     - returns: RequestBuilder<DeployedWorkflowSchema> 
     */
    open class func getOneDeployedWorkflowWithRequestBuilder(id: String) -> RequestBuilder<DeployedWorkflowSchema> {
        var localVariablePath = "/deployed-workflow/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeployedWorkflowSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
