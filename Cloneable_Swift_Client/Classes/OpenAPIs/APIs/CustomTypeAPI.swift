//
// CustomTypeAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class CustomTypeAPI {

    /**
     Create a custom type
     
     - parameter createCustomTypeRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createCustomType(createCustomTypeRequest: CreateCustomTypeRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomTypeSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return createCustomTypeWithRequestBuilder(createCustomTypeRequest: createCustomTypeRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a custom type
     - POST /custom-type
     - parameter createCustomTypeRequest: (body) Body (optional)
     - returns: RequestBuilder<CustomTypeSchema> 
     */
    open class func createCustomTypeWithRequestBuilder(createCustomTypeRequest: CreateCustomTypeRequest? = nil) -> RequestBuilder<CustomTypeSchema> {
        let localVariablePath = "/custom-type"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createCustomTypeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomTypeSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get custom types for company
     
     - parameter allForUse: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getCustomTypes(allForUse: Bool? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [CustomTypeSchema]?, _ error: Error?) -> Void)) -> RequestTask {
        return getCustomTypesWithRequestBuilder(allForUse: allForUse).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get custom types for company
     - GET /custom-types
     - parameter allForUse: (query)  (optional)
     - returns: RequestBuilder<[CustomTypeSchema]> 
     */
    open class func getCustomTypesWithRequestBuilder(allForUse: Bool? = nil) -> RequestBuilder<[CustomTypeSchema]> {
        let localVariablePath = "/custom-types"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "all_for_use": (wrappedValue: allForUse?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CustomTypeSchema]>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Returns a custom type by id
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOneCustomType(id: String, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomTypeSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return getOneCustomTypeWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns a custom type by id
     - GET /custom-type/{id}
     - parameter id: (path)  
     - returns: RequestBuilder<CustomTypeSchema> 
     */
    open class func getOneCustomTypeWithRequestBuilder(id: String) -> RequestBuilder<CustomTypeSchema> {
        var localVariablePath = "/custom-type/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomTypeSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update a custom type
     
     - parameter id: (path)  
     - parameter updateCustomTypeRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateCustomType(id: String, updateCustomTypeRequest: UpdateCustomTypeRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: CustomTypeSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return updateCustomTypeWithRequestBuilder(id: id, updateCustomTypeRequest: updateCustomTypeRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a custom type
     - PUT /custom-type/{id}
     - parameter id: (path)  
     - parameter updateCustomTypeRequest: (body) Body (optional)
     - returns: RequestBuilder<CustomTypeSchema> 
     */
    open class func updateCustomTypeWithRequestBuilder(id: String, updateCustomTypeRequest: UpdateCustomTypeRequest? = nil) -> RequestBuilder<CustomTypeSchema> {
        var localVariablePath = "/custom-type/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateCustomTypeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CustomTypeSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
