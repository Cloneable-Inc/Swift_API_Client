//
// WorkflowAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WorkflowAPI {

    /**
     Compile a workflow
     
     - parameter saveWorkflowRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func compileWorkflow(saveWorkflowRequest: SaveWorkflowRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeployedWorkflowSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return compileWorkflowWithRequestBuilder(saveWorkflowRequest: saveWorkflowRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Compile a workflow
     - POST /workflow/compile
     - parameter saveWorkflowRequest: (body) Body (optional)
     - returns: RequestBuilder<DeployedWorkflowSchema> 
     */
    open class func compileWorkflowWithRequestBuilder(saveWorkflowRequest: SaveWorkflowRequest? = nil) -> RequestBuilder<DeployedWorkflowSchema> {
        let localVariablePath = "/workflow/compile"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: saveWorkflowRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeployedWorkflowSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter createWorkflowRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createWorkflow(createWorkflowRequest: CreateWorkflowRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UpdateFile200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return createWorkflowWithRequestBuilder(createWorkflowRequest: createWorkflowRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /workflow/create
     - parameter createWorkflowRequest: (body) Body (optional)
     - returns: RequestBuilder<UpdateFile200Response> 
     */
    open class func createWorkflowWithRequestBuilder(createWorkflowRequest: CreateWorkflowRequest? = nil) -> RequestBuilder<UpdateFile200Response> {
        let localVariablePath = "/workflow/create"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createWorkflowRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdateFile200Response>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**

     - parameter duplicateWorkflowRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func duplicateWorkflow(duplicateWorkflowRequest: DuplicateWorkflowRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return duplicateWorkflowWithRequestBuilder(duplicateWorkflowRequest: duplicateWorkflowRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /workflow/duplicate
     - parameter duplicateWorkflowRequest: (body) Body (optional)
     - returns: RequestBuilder<String> 
     */
    open class func duplicateWorkflowWithRequestBuilder(duplicateWorkflowRequest: DuplicateWorkflowRequest? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/workflow/duplicate"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: duplicateWorkflowRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get all workflows
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getAllWorkflows(apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeployedWorkflowSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return getAllWorkflowsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all workflows
     - GET /workflows
     - returns: RequestBuilder<DeployedWorkflowSchema> 
     */
    open class func getAllWorkflowsWithRequestBuilder() -> RequestBuilder<DeployedWorkflowSchema> {
        let localVariablePath = "/workflows"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeployedWorkflowSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a workflow
     
     - parameter workflowId: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getWorkflow(workflowId: String, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeployedWorkflowSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return getWorkflowWithRequestBuilder(workflowId: workflowId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a workflow
     - GET /workflow/{workflow_id}
     - parameter workflowId: (path)  
     - returns: RequestBuilder<DeployedWorkflowSchema> 
     */
    open class func getWorkflowWithRequestBuilder(workflowId: String) -> RequestBuilder<DeployedWorkflowSchema> {
        var localVariablePath = "/workflow/{workflow_id}"
        let workflowIdPreEscape = "\(APIHelper.mapValueToPathItem(workflowId))"
        let workflowIdPostEscape = workflowIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{workflow_id}", with: workflowIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeployedWorkflowSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Save a workflow
     
     - parameter saveWorkflowRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func saveWorkflow(saveWorkflowRequest: SaveWorkflowRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: DeployedWorkflowSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return saveWorkflowWithRequestBuilder(saveWorkflowRequest: saveWorkflowRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Save a workflow
     - POST /workflow/save
     - parameter saveWorkflowRequest: (body) Body (optional)
     - returns: RequestBuilder<DeployedWorkflowSchema> 
     */
    open class func saveWorkflowWithRequestBuilder(saveWorkflowRequest: SaveWorkflowRequest? = nil) -> RequestBuilder<DeployedWorkflowSchema> {
        let localVariablePath = "/workflow/save"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: saveWorkflowRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeployedWorkflowSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
