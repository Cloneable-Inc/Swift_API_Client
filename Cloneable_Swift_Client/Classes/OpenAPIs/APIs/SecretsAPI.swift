//
// SecretsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class SecretsAPI {

    /**
     Create a new secret
     
     - parameter createSecretRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createSecret(createSecretRequest: CreateSecretRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListSecrets200ResponseInner?, _ error: Error?) -> Void)) -> RequestTask {
        return createSecretWithRequestBuilder(createSecretRequest: createSecretRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a new secret
     - POST /secrets
     - parameter createSecretRequest: (body) Body (optional)
     - returns: RequestBuilder<ListSecrets200ResponseInner> 
     */
    open class func createSecretWithRequestBuilder(createSecretRequest: CreateSecretRequest? = nil) -> RequestBuilder<ListSecrets200ResponseInner> {
        let localVariablePath = "/secrets"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createSecretRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListSecrets200ResponseInner>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Delete a secret
     
     - parameter id: (path)  
     - parameter body: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteSecret(id: String, body: AnyCodable? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateFile400Response?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteSecretWithRequestBuilder(id: id, body: body).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a secret
     - DELETE /secrets/{id}
     - parameter id: (path)  
     - parameter body: (body) Body (optional)
     - returns: RequestBuilder<CreateFile400Response> 
     */
    open class func deleteSecretWithRequestBuilder(id: String, body: AnyCodable? = nil) -> RequestBuilder<CreateFile400Response> {
        var localVariablePath = "/secrets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateFile400Response>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List all secrets
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listSecrets(apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ListSecrets200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return listSecretsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List all secrets
     - GET /secrets
     - returns: RequestBuilder<[ListSecrets200ResponseInner]> 
     */
    open class func listSecretsWithRequestBuilder() -> RequestBuilder<[ListSecrets200ResponseInner]> {
        let localVariablePath = "/secrets"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ListSecrets200ResponseInner]>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Update a secret
     
     - parameter id: (path)  
     - parameter putCacheItemRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateSecret(id: String, putCacheItemRequest: PutCacheItemRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateFile400Response?, _ error: Error?) -> Void)) -> RequestTask {
        return updateSecretWithRequestBuilder(id: id, putCacheItemRequest: putCacheItemRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a secret
     - PUT /secrets/{id}
     - parameter id: (path)  
     - parameter putCacheItemRequest: (body) Body (optional)
     - returns: RequestBuilder<CreateFile400Response> 
     */
    open class func updateSecretWithRequestBuilder(id: String, putCacheItemRequest: PutCacheItemRequest? = nil) -> RequestBuilder<CreateFile400Response> {
        var localVariablePath = "/secrets/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: putCacheItemRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateFile400Response>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
