//
// ExportAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ExportAPI {

    /**
     * enum for parameter exportType
     */
    public enum ExportType_triggerExport: String, CaseIterable {
        case katapult = "katapult"
        case csv = "csv"
    }

    /**
     Trigger an export to external system
     
     - parameter exportType: (path)  
     - parameter triggerExportRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func triggerExport(exportType: ExportType_triggerExport, triggerExportRequest: TriggerExportRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TriggerExport200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return triggerExportWithRequestBuilder(exportType: exportType, triggerExportRequest: triggerExportRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Trigger an export to external system
     - POST /exports/{exportType}
     - parameter exportType: (path)  
     - parameter triggerExportRequest: (body) Body (optional)
     - returns: RequestBuilder<TriggerExport200Response> 
     */
    open class func triggerExportWithRequestBuilder(exportType: ExportType_triggerExport, triggerExportRequest: TriggerExportRequest? = nil) -> RequestBuilder<TriggerExport200Response> {
        var localVariablePath = "/exports/{exportType}"
        let exportTypePreEscape = "\(exportType.rawValue)"
        let exportTypePostEscape = exportTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exportType}", with: exportTypePostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: triggerExportRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TriggerExport200Response>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
