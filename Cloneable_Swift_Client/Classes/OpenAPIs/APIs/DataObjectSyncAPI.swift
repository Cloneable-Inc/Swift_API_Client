//
// DataObjectSyncAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class DataObjectSyncAPI {

    /**
     Archive multiple data objects by IDs
     
     - parameter archiveDataObjectsRequest: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func archiveDataObjects(archiveDataObjectsRequest: ArchiveDataObjectsRequest? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ArchiveDataObjects200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return archiveDataObjectsWithRequestBuilder(archiveDataObjectsRequest: archiveDataObjectsRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Archive multiple data objects by IDs
     - POST /data-object-sync/archive
     - parameter archiveDataObjectsRequest: (body) Body (optional)
     - returns: RequestBuilder<ArchiveDataObjects200Response> 
     */
    open class func archiveDataObjectsWithRequestBuilder(archiveDataObjectsRequest: ArchiveDataObjectsRequest? = nil) -> RequestBuilder<ArchiveDataObjects200Response> {
        let localVariablePath = "/data-object-sync/archive"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: archiveDataObjectsRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ArchiveDataObjects200Response>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Find data objects containing a specific value in their array fields
     
     - parameter searchId: (query)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func findDataObjectFieldsByArrayValue(searchId: String, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [FindDataObjectFieldsByArrayValue200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return findDataObjectFieldsByArrayValueWithRequestBuilder(searchId: searchId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Find data objects containing a specific value in their array fields
     - GET /data-objects-sync/fields-by-array
     - parameter searchId: (query)  
     - returns: RequestBuilder<[FindDataObjectFieldsByArrayValue200ResponseInner]> 
     */
    open class func findDataObjectFieldsByArrayValueWithRequestBuilder(searchId: String) -> RequestBuilder<[FindDataObjectFieldsByArrayValue200ResponseInner]> {
        let localVariablePath = "/data-objects-sync/fields-by-array"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "searchId": (wrappedValue: searchId.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FindDataObjectFieldsByArrayValue200ResponseInner]>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get filtered and paginated data objects
     
     - parameter id: (query)  (optional)
     - parameter pageIndex: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter filters: (query)  (optional)
     - parameter latest: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getFilteredDataObjects(id: [String]? = nil, pageIndex: Int? = nil, pageSize: Int? = nil, filters: GetFilteredDataObjectsFiltersParameter? = nil, latest: String? = nil, sorting: GetManyFilesSortingParameter? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetDataObjectsPaged200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getFilteredDataObjectsWithRequestBuilder(id: id, pageIndex: pageIndex, pageSize: pageSize, filters: filters, latest: latest, sorting: sorting).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get filtered and paginated data objects
     - GET /data-object-sync/filtered-data-objects
     - parameter id: (query)  (optional)
     - parameter pageIndex: (query)  (optional)
     - parameter pageSize: (query)  (optional)
     - parameter filters: (query)  (optional)
     - parameter latest: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - returns: RequestBuilder<GetDataObjectsPaged200Response> 
     */
    open class func getFilteredDataObjectsWithRequestBuilder(id: [String]? = nil, pageIndex: Int? = nil, pageSize: Int? = nil, filters: GetFilteredDataObjectsFiltersParameter? = nil, latest: String? = nil, sorting: GetManyFilesSortingParameter? = nil) -> RequestBuilder<GetDataObjectsPaged200Response> {
        let localVariablePath = "/data-object-sync/filtered-data-objects"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.encodeToJSON(), isExplode: true),
            "page_index": (wrappedValue: pageIndex?.encodeToJSON(), isExplode: true),
            "page_size": (wrappedValue: pageSize?.encodeToJSON(), isExplode: true),
            "filters": (wrappedValue: filters?.encodeToJSON(), isExplode: true),
            "latest": (wrappedValue: latest?.encodeToJSON(), isExplode: true),
            "sorting": (wrappedValue: sorting?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetDataObjectsPaged200Response>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a flattened data object
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOne(id: String, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetOne200Response?, _ error: Error?) -> Void)) -> RequestTask {
        return getOneWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a flattened data object
     - GET /data-object-sync/data-object/{id}
     - parameter id: (path)  
     - returns: RequestBuilder<GetOne200Response> 
     */
    open class func getOneWithRequestBuilder(id: String) -> RequestBuilder<GetOne200Response> {
        var localVariablePath = "/data-object-sync/data-object/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetOne200Response>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Get a data object template
     
     - parameter id: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getTemplate(id: String, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: DataObjectTemplateSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return getTemplateWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a data object template
     - GET /data-object-sync/template/{id}
     - parameter id: (path)  
     - returns: RequestBuilder<DataObjectTemplateSchema> 
     */
    open class func getTemplateWithRequestBuilder(id: String) -> RequestBuilder<DataObjectTemplateSchema> {
        var localVariablePath = "/data-object-sync/template/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataObjectTemplateSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     List all data object templates
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listTemplates(apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: DataObjectTemplateSchema?, _ error: Error?) -> Void)) -> RequestTask {
        return listTemplatesWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List all data object templates
     - GET /data-object-sync/templates
     - returns: RequestBuilder<DataObjectTemplateSchema> 
     */
    open class func listTemplatesWithRequestBuilder() -> RequestBuilder<DataObjectTemplateSchema> {
        let localVariablePath = "/data-object-sync/templates"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DataObjectTemplateSchema>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Query data objects by template name and field values
     
     - parameter templateNameId: (query)  
     - parameter fieldFilters: (query)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func queryDataObjectFields(templateNameId: String, fieldFilters: [String: AnyCodable]? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: [QueryDataObjectFields200ResponseInner]?, _ error: Error?) -> Void)) -> RequestTask {
        return queryDataObjectFieldsWithRequestBuilder(templateNameId: templateNameId, fieldFilters: fieldFilters).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Query data objects by template name and field values
     - GET /data-objects-sync/query
     - parameter templateNameId: (query)  
     - parameter fieldFilters: (query)  (optional)
     - returns: RequestBuilder<[QueryDataObjectFields200ResponseInner]> 
     */
    open class func queryDataObjectFieldsWithRequestBuilder(templateNameId: String, fieldFilters: [String: AnyCodable]? = nil) -> RequestBuilder<[QueryDataObjectFields200ResponseInner]> {
        let localVariablePath = "/data-objects-sync/query"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "template_name_id": (wrappedValue: templateNameId.encodeToJSON(), isExplode: true),
            "field_filters": (wrappedValue: fieldFilters?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[QueryDataObjectFields200ResponseInner]>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }

    /**
     Sync a data object
     
     - parameter syncDataObjectRequestInner: (body) Body (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func syncDataObject(syncDataObjectRequestInner: [SyncDataObjectRequestInner]? = nil, apiResponseQueue: DispatchQueue = Cloneable_Swift_ClientAPI.apiResponseQueue, completion: @escaping ((_ data: String?, _ error: Error?) -> Void)) -> RequestTask {
        return syncDataObjectWithRequestBuilder(syncDataObjectRequestInner: syncDataObjectRequestInner).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sync a data object
     - POST /data-object-sync/data-object
     - parameter syncDataObjectRequestInner: (body) Body (optional)
     - returns: RequestBuilder<String> 
     */
    open class func syncDataObjectWithRequestBuilder(syncDataObjectRequestInner: [SyncDataObjectRequestInner]? = nil) -> RequestBuilder<String> {
        let localVariablePath = "/data-object-sync/data-object"
        let localVariableURLString = Cloneable_Swift_ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: syncDataObjectRequestInner)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = Cloneable_Swift_ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false)
    }
}
