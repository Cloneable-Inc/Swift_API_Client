//
// DeployedWorkflowSchemaObjectsInnerFieldsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DeployedWorkflowSchemaObjectsInnerFieldsInner: Codable, JSONEncodable, Hashable {

    public var displayName: String
    public var dynamicInputId: String
    public var arraySubType: String
    public var arrayCloneableSubType: String
    public var dynamicOutputId: String
    public var fieldId: String
    public var linkedObjectDisplayName: String
    public var linkedObjectId: String
    public var linkedObjectName: String
    public var linkedObjectRevision: Double
    public var name: String
    public var type: String
    public var cloneableDataType: String
    public var statusOptions: [String]
    public var objectDynamicCreateNewHandleId: Bool
    public var fileInformation: DeployedWorkflowSchemaObjectsInnerFieldsInnerFileInformation
    public var outputConnections: [DeployedWorkflowSchemaComponentsInnerOutputsInnerOutputConnectionsInner]

    public init(displayName: String, dynamicInputId: String, arraySubType: String, arrayCloneableSubType: String, dynamicOutputId: String, fieldId: String, linkedObjectDisplayName: String, linkedObjectId: String, linkedObjectName: String, linkedObjectRevision: Double, name: String, type: String, cloneableDataType: String, statusOptions: [String], objectDynamicCreateNewHandleId: Bool, fileInformation: DeployedWorkflowSchemaObjectsInnerFieldsInnerFileInformation, outputConnections: [DeployedWorkflowSchemaComponentsInnerOutputsInnerOutputConnectionsInner]) {
        self.displayName = displayName
        self.dynamicInputId = dynamicInputId
        self.arraySubType = arraySubType
        self.arrayCloneableSubType = arrayCloneableSubType
        self.dynamicOutputId = dynamicOutputId
        self.fieldId = fieldId
        self.linkedObjectDisplayName = linkedObjectDisplayName
        self.linkedObjectId = linkedObjectId
        self.linkedObjectName = linkedObjectName
        self.linkedObjectRevision = linkedObjectRevision
        self.name = name
        self.type = type
        self.cloneableDataType = cloneableDataType
        self.statusOptions = statusOptions
        self.objectDynamicCreateNewHandleId = objectDynamicCreateNewHandleId
        self.fileInformation = fileInformation
        self.outputConnections = outputConnections
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case displayName = "display_name"
        case dynamicInputId = "dynamic_input_id"
        case arraySubType = "array_sub_type"
        case arrayCloneableSubType = "array_cloneable_sub_type"
        case dynamicOutputId = "dynamic_output_id"
        case fieldId = "field_id"
        case linkedObjectDisplayName = "linked_object_display_name"
        case linkedObjectId = "linked_object_id"
        case linkedObjectName = "linked_object_name"
        case linkedObjectRevision = "linked_object_revision"
        case name
        case type
        case cloneableDataType = "cloneable_data_type"
        case statusOptions = "status_options"
        case objectDynamicCreateNewHandleId = "object_dynamic_create_new_handle_id"
        case fileInformation = "file_information"
        case outputConnections = "output_connections"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(dynamicInputId, forKey: .dynamicInputId)
        try container.encode(arraySubType, forKey: .arraySubType)
        try container.encode(arrayCloneableSubType, forKey: .arrayCloneableSubType)
        try container.encode(dynamicOutputId, forKey: .dynamicOutputId)
        try container.encode(fieldId, forKey: .fieldId)
        try container.encode(linkedObjectDisplayName, forKey: .linkedObjectDisplayName)
        try container.encode(linkedObjectId, forKey: .linkedObjectId)
        try container.encode(linkedObjectName, forKey: .linkedObjectName)
        try container.encode(linkedObjectRevision, forKey: .linkedObjectRevision)
        try container.encode(name, forKey: .name)
        try container.encode(type, forKey: .type)
        try container.encode(cloneableDataType, forKey: .cloneableDataType)
        try container.encode(statusOptions, forKey: .statusOptions)
        try container.encode(objectDynamicCreateNewHandleId, forKey: .objectDynamicCreateNewHandleId)
        try container.encode(fileInformation, forKey: .fileInformation)
        try container.encode(outputConnections, forKey: .outputConnections)
    }
}

