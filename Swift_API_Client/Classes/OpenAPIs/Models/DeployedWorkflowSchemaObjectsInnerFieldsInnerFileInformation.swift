//
// DeployedWorkflowSchemaObjectsInnerFieldsInnerFileInformation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct DeployedWorkflowSchemaObjectsInnerFieldsInnerFileInformation: Codable, JSONEncodable, Hashable {

    public var fileName: String
    public var fileUrl: String
    public var storageProvider: String
    public var storageAuthProviderRefId: String
    public var storageAuthProviderName: String
    public var fileType: String
    public var fileExtension: String
    public var fileSize: Double
    public var oneWaySync: Bool

    public init(fileName: String, fileUrl: String, storageProvider: String, storageAuthProviderRefId: String, storageAuthProviderName: String, fileType: String, fileExtension: String, fileSize: Double, oneWaySync: Bool) {
        self.fileName = fileName
        self.fileUrl = fileUrl
        self.storageProvider = storageProvider
        self.storageAuthProviderRefId = storageAuthProviderRefId
        self.storageAuthProviderName = storageAuthProviderName
        self.fileType = fileType
        self.fileExtension = fileExtension
        self.fileSize = fileSize
        self.oneWaySync = oneWaySync
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case fileName = "file_name"
        case fileUrl = "file_url"
        case storageProvider = "storage_provider"
        case storageAuthProviderRefId = "storage_auth_provider_ref_id"
        case storageAuthProviderName = "storage_auth_provider_name"
        case fileType = "file_type"
        case fileExtension = "file_extension"
        case fileSize = "file_size"
        case oneWaySync = "one_way_sync"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(fileName, forKey: .fileName)
        try container.encode(fileUrl, forKey: .fileUrl)
        try container.encode(storageProvider, forKey: .storageProvider)
        try container.encode(storageAuthProviderRefId, forKey: .storageAuthProviderRefId)
        try container.encode(storageAuthProviderName, forKey: .storageAuthProviderName)
        try container.encode(fileType, forKey: .fileType)
        try container.encode(fileExtension, forKey: .fileExtension)
        try container.encode(fileSize, forKey: .fileSize)
        try container.encode(oneWaySync, forKey: .oneWaySync)
    }
}

