//
// InsertFileSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct InsertFileSchema: Codable, JSONEncodable, Hashable {

    /** Whether the file is saved to the cloud */
    public var savedToCloud: Bool?
    /** Whether the file should be synced to the edge device */
    public var syncToEdge: Bool?
    public var relatedWorkflowId: String?
    public var relatedObjectId: String?
    public var typeRefIds: [String]?

    public init(savedToCloud: Bool? = nil, syncToEdge: Bool? = nil, relatedWorkflowId: String? = nil, relatedObjectId: String? = nil, typeRefIds: [String]? = nil) {
        self.savedToCloud = savedToCloud
        self.syncToEdge = syncToEdge
        self.relatedWorkflowId = relatedWorkflowId
        self.relatedObjectId = relatedObjectId
        self.typeRefIds = typeRefIds
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case savedToCloud = "saved_to_cloud"
        case syncToEdge = "sync_to_edge"
        case relatedWorkflowId = "related_workflow_id"
        case relatedObjectId = "related_object_id"
        case typeRefIds = "type_ref_ids"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(savedToCloud, forKey: .savedToCloud)
        try container.encodeIfPresent(syncToEdge, forKey: .syncToEdge)
        try container.encodeIfPresent(relatedWorkflowId, forKey: .relatedWorkflowId)
        try container.encodeIfPresent(relatedObjectId, forKey: .relatedObjectId)
        try container.encodeIfPresent(typeRefIds, forKey: .typeRefIds)
    }
}

