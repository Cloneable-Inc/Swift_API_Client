//
// UpdateJobRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct UpdateJobRequest: Sendable, Codable, ParameterConvertible, Hashable {

    public enum Status: String, Sendable, Codable, CaseIterable {
        case pending = "pending"
        case inProgress = "in_progress"
        case completed = "completed"
        case cancelled = "cancelled"
    }
    public var name: String?
    public var description: String? = ""
    public var configurationId: UUID?
    public var status: Status? = .pending
    public var assignedTo: String?
    public var location: String?
    public var metadata: GetJobs200ResponseJobsInnerMetadata?
    public var importExecutionId: UUID?
    public var createdBy: String?

    public init(name: String? = nil, description: String? = "", configurationId: UUID? = nil, status: Status? = .pending, assignedTo: String? = nil, location: String? = nil, metadata: GetJobs200ResponseJobsInnerMetadata? = nil, importExecutionId: UUID? = nil, createdBy: String? = nil) {
        self.name = name
        self.description = description
        self.configurationId = configurationId
        self.status = status
        self.assignedTo = assignedTo
        self.location = location
        self.metadata = metadata
        self.importExecutionId = importExecutionId
        self.createdBy = createdBy
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name
        case description
        case configurationId = "configuration_id"
        case status
        case assignedTo = "assigned_to"
        case location
        case metadata
        case importExecutionId = "import_execution_id"
        case createdBy = "created_by"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(configurationId, forKey: .configurationId)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(assignedTo, forKey: .assignedTo)
        try container.encodeIfPresent(location, forKey: .location)
        try container.encodeIfPresent(metadata, forKey: .metadata)
        try container.encodeIfPresent(importExecutionId, forKey: .importExecutionId)
        try container.encodeIfPresent(createdBy, forKey: .createdBy)
    }
}

