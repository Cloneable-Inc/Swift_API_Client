//
// DataObjectSchemaFieldsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct DataObjectSchemaFieldsInner: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: String
    public var arraySubType: String?
    public var displayName: String
    public var fieldId: String
    public var linkedObjectDisplayName: String?
    public var linkedObjectName: String?
    public var linkedObjectRevision: Double?
    public var linkedObjectTemplateId: String?
    public var modifiedAt: Date
    public var modifiedBy: String?
    public var name: String
    public var storedValue: String?
    public var type: String
    public var jsonSchema: String?
    public var jsonSchemaId: String?
    public var teamId: String?

    public init(id: String, arraySubType: String? = nil, displayName: String, fieldId: String, linkedObjectDisplayName: String? = nil, linkedObjectName: String? = nil, linkedObjectRevision: Double? = nil, linkedObjectTemplateId: String? = nil, modifiedAt: Date, modifiedBy: String? = nil, name: String, storedValue: String? = nil, type: String, jsonSchema: String? = nil, jsonSchemaId: String? = nil, teamId: String? = nil) {
        self.id = id
        self.arraySubType = arraySubType
        self.displayName = displayName
        self.fieldId = fieldId
        self.linkedObjectDisplayName = linkedObjectDisplayName
        self.linkedObjectName = linkedObjectName
        self.linkedObjectRevision = linkedObjectRevision
        self.linkedObjectTemplateId = linkedObjectTemplateId
        self.modifiedAt = modifiedAt
        self.modifiedBy = modifiedBy
        self.name = name
        self.storedValue = storedValue
        self.type = type
        self.jsonSchema = jsonSchema
        self.jsonSchemaId = jsonSchemaId
        self.teamId = teamId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case arraySubType = "array_sub_type"
        case displayName = "display_name"
        case fieldId = "field_id"
        case linkedObjectDisplayName = "linked_object_display_name"
        case linkedObjectName = "linked_object_name"
        case linkedObjectRevision = "linked_object_revision"
        case linkedObjectTemplateId = "linked_object_template_id"
        case modifiedAt = "modified_at"
        case modifiedBy = "modified_by"
        case name
        case storedValue = "stored_value"
        case type
        case jsonSchema = "json_schema"
        case jsonSchemaId = "json_schema_id"
        case teamId = "team_id"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(id, forKey: .id)
        try container.encodeIfPresent(arraySubType, forKey: .arraySubType)
        try container.encode(displayName, forKey: .displayName)
        try container.encode(fieldId, forKey: .fieldId)
        try container.encodeIfPresent(linkedObjectDisplayName, forKey: .linkedObjectDisplayName)
        try container.encodeIfPresent(linkedObjectName, forKey: .linkedObjectName)
        try container.encodeIfPresent(linkedObjectRevision, forKey: .linkedObjectRevision)
        try container.encodeIfPresent(linkedObjectTemplateId, forKey: .linkedObjectTemplateId)
        try container.encode(modifiedAt, forKey: .modifiedAt)
        try container.encodeIfPresent(modifiedBy, forKey: .modifiedBy)
        try container.encode(name, forKey: .name)
        try container.encodeIfPresent(storedValue, forKey: .storedValue)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(jsonSchema, forKey: .jsonSchema)
        try container.encodeIfPresent(jsonSchemaId, forKey: .jsonSchemaId)
        try container.encodeIfPresent(teamId, forKey: .teamId)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension DataObjectSchemaFieldsInner: Identifiable {}
