//
// DataObjectFieldMetaDataSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct DataObjectFieldMetaDataSchema: Sendable, Codable, ParameterConvertible, Hashable {

    public var linkedObjectDisplayName: String?
    public var linkedObjectName: String?
    public var linkedObjectRevision: Double?
    public var linkedObjectTemplateId: String?
    public var arraySubType: String?
    public var jsonSchema: String?
    public var jsonSchemaId: String?
    public var objectTemplateId: String?
    public var objectTemplateFieldId: String?
    public var displayName: String?
    public var data: JSONValue?

    public init(linkedObjectDisplayName: String? = nil, linkedObjectName: String? = nil, linkedObjectRevision: Double? = nil, linkedObjectTemplateId: String? = nil, arraySubType: String? = nil, jsonSchema: String? = nil, jsonSchemaId: String? = nil, objectTemplateId: String? = nil, objectTemplateFieldId: String? = nil, displayName: String? = nil, data: JSONValue? = nil) {
        self.linkedObjectDisplayName = linkedObjectDisplayName
        self.linkedObjectName = linkedObjectName
        self.linkedObjectRevision = linkedObjectRevision
        self.linkedObjectTemplateId = linkedObjectTemplateId
        self.arraySubType = arraySubType
        self.jsonSchema = jsonSchema
        self.jsonSchemaId = jsonSchemaId
        self.objectTemplateId = objectTemplateId
        self.objectTemplateFieldId = objectTemplateFieldId
        self.displayName = displayName
        self.data = data
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case linkedObjectDisplayName = "linked_object_display_name"
        case linkedObjectName = "linked_object_name"
        case linkedObjectRevision = "linked_object_revision"
        case linkedObjectTemplateId = "linked_object_template_id"
        case arraySubType = "array_sub_type"
        case jsonSchema = "json_schema"
        case jsonSchemaId = "json_schema_id"
        case objectTemplateId = "object_template_id"
        case objectTemplateFieldId = "object_template_field_id"
        case displayName = "display_name"
        case data
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(linkedObjectDisplayName, forKey: .linkedObjectDisplayName)
        try container.encodeIfPresent(linkedObjectName, forKey: .linkedObjectName)
        try container.encodeIfPresent(linkedObjectRevision, forKey: .linkedObjectRevision)
        try container.encodeIfPresent(linkedObjectTemplateId, forKey: .linkedObjectTemplateId)
        try container.encodeIfPresent(arraySubType, forKey: .arraySubType)
        try container.encodeIfPresent(jsonSchema, forKey: .jsonSchema)
        try container.encodeIfPresent(jsonSchemaId, forKey: .jsonSchemaId)
        try container.encodeIfPresent(objectTemplateId, forKey: .objectTemplateId)
        try container.encodeIfPresent(objectTemplateFieldId, forKey: .objectTemplateFieldId)
        try container.encodeIfPresent(displayName, forKey: .displayName)
        try container.encodeIfPresent(data, forKey: .data)
    }
}

