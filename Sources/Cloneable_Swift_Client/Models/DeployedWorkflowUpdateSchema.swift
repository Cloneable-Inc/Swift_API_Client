//
// DeployedWorkflowUpdateSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct DeployedWorkflowUpdateSchema: Sendable, Codable, ParameterConvertible, Hashable {

    public var id: String?
    public var companyId: String
    public var createdAt: String
    public var updatedAt: String
    public var createdBy: String
    public var environment: String
    public var typeRefId: String
    public var resources: [SaveWorkflowRequestResourcesInner]?
    public var edges: [CreateDeployedWorkflowSchemaEdgesInner]
    public var components: [CreateDeployedWorkflowSchemaComponentsInner]
    public var objects: [CreateDeployedWorkflowSchemaObjectsInner]
    public var revision: Double?
    public var workflowDescription: String
    public var workflowId: String
    public var workflowName: String
    public var renderOrder: [String]?
    public var icon: String?

    public init(id: String? = nil, companyId: String, createdAt: String, updatedAt: String, createdBy: String, environment: String, typeRefId: String, resources: [SaveWorkflowRequestResourcesInner]? = nil, edges: [CreateDeployedWorkflowSchemaEdgesInner], components: [CreateDeployedWorkflowSchemaComponentsInner], objects: [CreateDeployedWorkflowSchemaObjectsInner], revision: Double? = nil, workflowDescription: String, workflowId: String, workflowName: String, renderOrder: [String]? = nil, icon: String? = nil) {
        self.id = id
        self.companyId = companyId
        self.createdAt = createdAt
        self.updatedAt = updatedAt
        self.createdBy = createdBy
        self.environment = environment
        self.typeRefId = typeRefId
        self.resources = resources
        self.edges = edges
        self.components = components
        self.objects = objects
        self.revision = revision
        self.workflowDescription = workflowDescription
        self.workflowId = workflowId
        self.workflowName = workflowName
        self.renderOrder = renderOrder
        self.icon = icon
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case companyId = "company_id"
        case createdAt = "created_at"
        case updatedAt = "updated_at"
        case createdBy = "created_by"
        case environment
        case typeRefId = "type_ref_id"
        case resources
        case edges
        case components
        case objects
        case revision
        case workflowDescription = "workflow_description"
        case workflowId = "workflow_id"
        case workflowName = "workflow_name"
        case renderOrder = "render_order"
        case icon
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(companyId, forKey: .companyId)
        try container.encode(createdAt, forKey: .createdAt)
        try container.encode(updatedAt, forKey: .updatedAt)
        try container.encode(createdBy, forKey: .createdBy)
        try container.encode(environment, forKey: .environment)
        try container.encode(typeRefId, forKey: .typeRefId)
        try container.encodeIfPresent(resources, forKey: .resources)
        try container.encode(edges, forKey: .edges)
        try container.encode(components, forKey: .components)
        try container.encode(objects, forKey: .objects)
        try container.encodeIfPresent(revision, forKey: .revision)
        try container.encode(workflowDescription, forKey: .workflowDescription)
        try container.encode(workflowId, forKey: .workflowId)
        try container.encode(workflowName, forKey: .workflowName)
        try container.encodeIfPresent(renderOrder, forKey: .renderOrder)
        try container.encodeIfPresent(icon, forKey: .icon)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension DeployedWorkflowUpdateSchema: Identifiable {}
