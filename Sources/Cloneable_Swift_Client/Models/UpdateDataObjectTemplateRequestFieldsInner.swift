//
// UpdateDataObjectTemplateRequestFieldsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct UpdateDataObjectTemplateRequestFieldsInner: Sendable, Codable, ParameterConvertible, Hashable {

    public var arraySubType: String?
    public var jsonSchema: String?
    public var jsonSchemaId: String?
    public var displayName: String
    public var objectDescription: String?
    public var fieldId: String
    public var linkedObjectDisplayName: String?
    public var linkedObjectName: String?
    public var linkedObjectRevision: Double?
    public var linkedObjectTemplateId: String?
    public var linkedObjectId: String?
    public var modifiedAt: Date?
    public var modifiedBy: String?
    public var name: String
    public var type: String
    public var requiredFor: UpdateDataObjectTemplateRequestFieldsInnerRequiredFor?
    public var fileInformation: UpdateDataObjectTemplateRequestFieldsInnerFileInformation?
    public var statusOptions: [String]?
    public var customTypeId: String?
    public var customTypeProperty: String?
    public var visible: Bool?
    public var readonly: Bool?

    public init(arraySubType: String? = nil, jsonSchema: String? = nil, jsonSchemaId: String? = nil, displayName: String, objectDescription: String? = nil, fieldId: String, linkedObjectDisplayName: String? = nil, linkedObjectName: String? = nil, linkedObjectRevision: Double? = nil, linkedObjectTemplateId: String? = nil, linkedObjectId: String? = nil, modifiedAt: Date? = nil, modifiedBy: String? = nil, name: String, type: String, requiredFor: UpdateDataObjectTemplateRequestFieldsInnerRequiredFor? = nil, fileInformation: UpdateDataObjectTemplateRequestFieldsInnerFileInformation? = nil, statusOptions: [String]? = nil, customTypeId: String? = nil, customTypeProperty: String? = nil, visible: Bool? = nil, readonly: Bool? = nil) {
        self.arraySubType = arraySubType
        self.jsonSchema = jsonSchema
        self.jsonSchemaId = jsonSchemaId
        self.displayName = displayName
        self.objectDescription = objectDescription
        self.fieldId = fieldId
        self.linkedObjectDisplayName = linkedObjectDisplayName
        self.linkedObjectName = linkedObjectName
        self.linkedObjectRevision = linkedObjectRevision
        self.linkedObjectTemplateId = linkedObjectTemplateId
        self.linkedObjectId = linkedObjectId
        self.modifiedAt = modifiedAt
        self.modifiedBy = modifiedBy
        self.name = name
        self.type = type
        self.requiredFor = requiredFor
        self.fileInformation = fileInformation
        self.statusOptions = statusOptions
        self.customTypeId = customTypeId
        self.customTypeProperty = customTypeProperty
        self.visible = visible
        self.readonly = readonly
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case arraySubType = "array_sub_type"
        case jsonSchema = "json_schema"
        case jsonSchemaId = "json_schema_id"
        case displayName = "display_name"
        case objectDescription = "object_description"
        case fieldId = "field_id"
        case linkedObjectDisplayName = "linked_object_display_name"
        case linkedObjectName = "linked_object_name"
        case linkedObjectRevision = "linked_object_revision"
        case linkedObjectTemplateId = "linked_object_template_id"
        case linkedObjectId = "linked_object_id"
        case modifiedAt = "modified_at"
        case modifiedBy = "modified_by"
        case name
        case type
        case requiredFor
        case fileInformation = "file_information"
        case statusOptions = "status_options"
        case customTypeId = "custom_type_id"
        case customTypeProperty = "custom_type_property"
        case visible
        case readonly
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(arraySubType, forKey: .arraySubType)
        try container.encodeIfPresent(jsonSchema, forKey: .jsonSchema)
        try container.encodeIfPresent(jsonSchemaId, forKey: .jsonSchemaId)
        try container.encode(displayName, forKey: .displayName)
        try container.encodeIfPresent(objectDescription, forKey: .objectDescription)
        try container.encode(fieldId, forKey: .fieldId)
        try container.encodeIfPresent(linkedObjectDisplayName, forKey: .linkedObjectDisplayName)
        try container.encodeIfPresent(linkedObjectName, forKey: .linkedObjectName)
        try container.encodeIfPresent(linkedObjectRevision, forKey: .linkedObjectRevision)
        try container.encodeIfPresent(linkedObjectTemplateId, forKey: .linkedObjectTemplateId)
        try container.encodeIfPresent(linkedObjectId, forKey: .linkedObjectId)
        try container.encodeIfPresent(modifiedAt, forKey: .modifiedAt)
        try container.encodeIfPresent(modifiedBy, forKey: .modifiedBy)
        try container.encode(name, forKey: .name)
        try container.encode(type, forKey: .type)
        try container.encodeIfPresent(requiredFor, forKey: .requiredFor)
        try container.encodeIfPresent(fileInformation, forKey: .fileInformation)
        try container.encodeIfPresent(statusOptions, forKey: .statusOptions)
        try container.encodeIfPresent(customTypeId, forKey: .customTypeId)
        try container.encodeIfPresent(customTypeProperty, forKey: .customTypeProperty)
        try container.encodeIfPresent(visible, forKey: .visible)
        try container.encodeIfPresent(readonly, forKey: .readonly)
    }
}

