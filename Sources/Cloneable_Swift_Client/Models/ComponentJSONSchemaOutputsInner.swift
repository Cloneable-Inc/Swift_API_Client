//
// ComponentJSONSchemaOutputsInner.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct ComponentJSONSchemaOutputsInner: Sendable, Codable, ParameterConvertible, Hashable {

    public var outputID: String
    public var outputName: String
    public var outputDescription: String
    public var outputDataType: String
    public var outputsArray: Bool?
    public var outputClassification: String?
    public var outputImmediately: Bool?
    public var _required: Bool
    public var group: String?
    public var outputImmediatelyUserDefinable: Bool?
    public var instantTrigger: Bool?
    public var userCanChooseIfInstant: Bool?
    public var dynamicOutputID: String?
    public var jsonSchema: String?
    public var jsonSchemaId: String?

    public init(outputID: String, outputName: String, outputDescription: String, outputDataType: String, outputsArray: Bool? = nil, outputClassification: String? = nil, outputImmediately: Bool? = nil, _required: Bool, group: String? = nil, outputImmediatelyUserDefinable: Bool? = nil, instantTrigger: Bool? = nil, userCanChooseIfInstant: Bool? = nil, dynamicOutputID: String? = nil, jsonSchema: String? = nil, jsonSchemaId: String? = nil) {
        self.outputID = outputID
        self.outputName = outputName
        self.outputDescription = outputDescription
        self.outputDataType = outputDataType
        self.outputsArray = outputsArray
        self.outputClassification = outputClassification
        self.outputImmediately = outputImmediately
        self._required = _required
        self.group = group
        self.outputImmediatelyUserDefinable = outputImmediatelyUserDefinable
        self.instantTrigger = instantTrigger
        self.userCanChooseIfInstant = userCanChooseIfInstant
        self.dynamicOutputID = dynamicOutputID
        self.jsonSchema = jsonSchema
        self.jsonSchemaId = jsonSchemaId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case outputID
        case outputName
        case outputDescription
        case outputDataType
        case outputsArray
        case outputClassification
        case outputImmediately
        case _required = "required"
        case group
        case outputImmediatelyUserDefinable
        case instantTrigger
        case userCanChooseIfInstant
        case dynamicOutputID
        case jsonSchema
        case jsonSchemaId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(outputID, forKey: .outputID)
        try container.encode(outputName, forKey: .outputName)
        try container.encode(outputDescription, forKey: .outputDescription)
        try container.encode(outputDataType, forKey: .outputDataType)
        try container.encodeIfPresent(outputsArray, forKey: .outputsArray)
        try container.encodeIfPresent(outputClassification, forKey: .outputClassification)
        try container.encodeIfPresent(outputImmediately, forKey: .outputImmediately)
        try container.encode(_required, forKey: ._required)
        try container.encodeIfPresent(group, forKey: .group)
        try container.encodeIfPresent(outputImmediatelyUserDefinable, forKey: .outputImmediatelyUserDefinable)
        try container.encodeIfPresent(instantTrigger, forKey: .instantTrigger)
        try container.encodeIfPresent(userCanChooseIfInstant, forKey: .userCanChooseIfInstant)
        try container.encodeIfPresent(dynamicOutputID, forKey: .dynamicOutputID)
        try container.encodeIfPresent(jsonSchema, forKey: .jsonSchema)
        try container.encodeIfPresent(jsonSchemaId, forKey: .jsonSchemaId)
    }
}

