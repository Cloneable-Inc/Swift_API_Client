//
// WorkflowEdgeSchema.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

public struct WorkflowEdgeSchema: Sendable, Codable, ParameterConvertible, Hashable {

    public var animated: Bool
    public var id: String
    public var markerEnd: CreateDeployedWorkflowSchemaEdgesInnerMarkerEnd
    public var source: String
    public var sourceHandle: String
    public var style: CreateDeployedWorkflowSchemaEdgesInnerStyle
    public var target: String
    public var targetHandle: String
    public var type: String

    public init(animated: Bool, id: String, markerEnd: CreateDeployedWorkflowSchemaEdgesInnerMarkerEnd, source: String, sourceHandle: String, style: CreateDeployedWorkflowSchemaEdgesInnerStyle, target: String, targetHandle: String, type: String) {
        self.animated = animated
        self.id = id
        self.markerEnd = markerEnd
        self.source = source
        self.sourceHandle = sourceHandle
        self.style = style
        self.target = target
        self.targetHandle = targetHandle
        self.type = type
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case animated
        case id
        case markerEnd = "marker_end"
        case source
        case sourceHandle = "source_handle"
        case style
        case target
        case targetHandle = "target_handle"
        case type
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(animated, forKey: .animated)
        try container.encode(id, forKey: .id)
        try container.encode(markerEnd, forKey: .markerEnd)
        try container.encode(source, forKey: .source)
        try container.encode(sourceHandle, forKey: .sourceHandle)
        try container.encode(style, forKey: .style)
        try container.encode(target, forKey: .target)
        try container.encode(targetHandle, forKey: .targetHandle)
        try container.encode(type, forKey: .type)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension WorkflowEdgeSchema: Identifiable {}
