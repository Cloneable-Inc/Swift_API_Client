//
// CompletedWorkflowAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class CompletedWorkflowAPI {

    /**
     Add a new completed workflow
     
     - parameter createCompletedWorkflowSchema: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UpdateFile200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createCompletedWorkflow(createCompletedWorkflowSchema: CreateCompletedWorkflowSchema? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> UpdateFile200Response {
        return try await createCompletedWorkflowWithRequestBuilder(createCompletedWorkflowSchema: createCompletedWorkflowSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Add a new completed workflow
     - PUT /completed-workflow
     - parameter createCompletedWorkflowSchema: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UpdateFile200Response> 
     */
    open class func createCompletedWorkflowWithRequestBuilder(createCompletedWorkflowSchema: CreateCompletedWorkflowSchema? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<UpdateFile200Response> {
        let localVariablePath = "/completed-workflow"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createCompletedWorkflowSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdateFile200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get all completed workflows
     
     - parameter getCompletedWorkflowsRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [CompletedWorkflowSchema]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getCompletedWorkflows(getCompletedWorkflowsRequest: GetCompletedWorkflowsRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> [CompletedWorkflowSchema] {
        return try await getCompletedWorkflowsWithRequestBuilder(getCompletedWorkflowsRequest: getCompletedWorkflowsRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get all completed workflows
     - POST /completed-workflows
     - parameter getCompletedWorkflowsRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[CompletedWorkflowSchema]> 
     */
    open class func getCompletedWorkflowsWithRequestBuilder(getCompletedWorkflowsRequest: GetCompletedWorkflowsRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<[CompletedWorkflowSchema]> {
        let localVariablePath = "/completed-workflows"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getCompletedWorkflowsRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CompletedWorkflowSchema]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Returns a completed workflow by id
     
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CompletedWorkflowSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getOneCompletedWorkflow(id: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> CompletedWorkflowSchema {
        return try await getOneCompletedWorkflowWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Returns a completed workflow by id
     - GET /completed-workflow/{id}
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CompletedWorkflowSchema> 
     */
    open class func getOneCompletedWorkflowWithRequestBuilder(id: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<CompletedWorkflowSchema> {
        var localVariablePath = "/completed-workflow/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CompletedWorkflowSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get paginated completed workflows
     
     - parameter index: (query)  (optional)
     - parameter size: (query)  (optional)
     - parameter filters: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter latest: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetPagedWorkflows200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getPagedWorkflows(index: Int? = nil, size: Int? = nil, filters: GetPagedWorkflowsFiltersParameter? = nil, id: [String]? = nil, latest: String? = nil, sorting: GetPagedWorkflowsSortingParameter? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetPagedWorkflows200Response {
        return try await getPagedWorkflowsWithRequestBuilder(index: index, size: size, filters: filters, id: id, latest: latest, sorting: sorting, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get paginated completed workflows
     - GET /completed-workflows
     - parameter index: (query)  (optional)
     - parameter size: (query)  (optional)
     - parameter filters: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter latest: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetPagedWorkflows200Response> 
     */
    open class func getPagedWorkflowsWithRequestBuilder(index: Int? = nil, size: Int? = nil, filters: GetPagedWorkflowsFiltersParameter? = nil, id: [String]? = nil, latest: String? = nil, sorting: GetPagedWorkflowsSortingParameter? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<GetPagedWorkflows200Response> {
        let localVariablePath = "/completed-workflows"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "index": (wrappedValue: index?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filters": (wrappedValue: filters?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "id": (wrappedValue: id?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "latest": (wrappedValue: latest?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sorting": (wrappedValue: sorting?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetPagedWorkflows200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Update a completed workflow
     
     - parameter id: (path)  
     - parameter updateCompletedWorkflowSchema: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UpdateFile200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateCompletedWorkflow(id: String, updateCompletedWorkflowSchema: UpdateCompletedWorkflowSchema? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> UpdateFile200Response {
        return try await updateCompletedWorkflowWithRequestBuilder(id: id, updateCompletedWorkflowSchema: updateCompletedWorkflowSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update a completed workflow
     - POST /completed-workflow/{id}
     - parameter id: (path)  
     - parameter updateCompletedWorkflowSchema: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UpdateFile200Response> 
     */
    open class func updateCompletedWorkflowWithRequestBuilder(id: String, updateCompletedWorkflowSchema: UpdateCompletedWorkflowSchema? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<UpdateFile200Response> {
        var localVariablePath = "/completed-workflow/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateCompletedWorkflowSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdateFile200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}
