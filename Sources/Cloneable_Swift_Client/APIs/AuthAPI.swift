//
// AuthAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class AuthAPI {

    /**

     - parameter createApiKeyRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CreateApiKey200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createApiKey(createApiKeyRequest: CreateApiKeyRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> CreateApiKey200Response {
        return try await createApiKeyWithRequestBuilder(createApiKeyRequest: createApiKeyRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /auth/api-key
     - parameter createApiKeyRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CreateApiKey200Response> 
     */
    open class func createApiKeyWithRequestBuilder(createApiKeyRequest: CreateApiKeyRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<CreateApiKey200Response> {
        let localVariablePath = "/auth/api-key"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createApiKeyRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateApiKey200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter updateFile200Response: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CreateFile400Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deactivateApiKey(updateFile200Response: UpdateFile200Response? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> CreateFile400Response {
        return try await deactivateApiKeyWithRequestBuilder(updateFile200Response: updateFile200Response, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /auth/api-key/deactivate
     - parameter updateFile200Response: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CreateFile400Response> 
     */
    open class func deactivateApiKeyWithRequestBuilder(updateFile200Response: UpdateFile200Response? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<CreateFile400Response> {
        let localVariablePath = "/auth/api-key/deactivate"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateFile200Response, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateFile400Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: [GetApiKeys200ResponseInner]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getApiKeys(apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> [GetApiKeys200ResponseInner] {
        return try await getApiKeysWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /auth/api-key
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[GetApiKeys200ResponseInner]> 
     */
    open class func getApiKeysWithRequestBuilder(apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<[GetApiKeys200ResponseInner]> {
        let localVariablePath = "/auth/api-key"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[GetApiKeys200ResponseInner]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter issueKeyForCustomAuthRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CreateApiKey200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func issueKeyForCustomAuth(issueKeyForCustomAuthRequest: IssueKeyForCustomAuthRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> CreateApiKey200Response {
        return try await issueKeyForCustomAuthWithRequestBuilder(issueKeyForCustomAuthRequest: issueKeyForCustomAuthRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - POST /auth/issue-key
     - parameter issueKeyForCustomAuthRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CreateApiKey200Response> 
     */
    open class func issueKeyForCustomAuthWithRequestBuilder(issueKeyForCustomAuthRequest: IssueKeyForCustomAuthRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<CreateApiKey200Response> {
        let localVariablePath = "/auth/issue-key"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: issueKeyForCustomAuthRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateApiKey200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Create and sync users to auth platform for new accounts
     
     - parameter signupCreateUserRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SignupCreateUser200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func signupCreateUser(signupCreateUserRequest: SignupCreateUserRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> SignupCreateUser200Response {
        return try await signupCreateUserWithRequestBuilder(signupCreateUserRequest: signupCreateUserRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create and sync users to auth platform for new accounts
     - POST /auth/signup/create-user
     - parameter signupCreateUserRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SignupCreateUser200Response> 
     */
    open class func signupCreateUserWithRequestBuilder(signupCreateUserRequest: SignupCreateUserRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<SignupCreateUser200Response> {
        let localVariablePath = "/auth/signup/create-user"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signupCreateUserRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignupCreateUser200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Check if signup is needed
     
     - parameter apiConfiguration: The configuration for the http request.
     - returns: SignupNeeded200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func signupNeeded(apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> SignupNeeded200Response {
        return try await signupNeededWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Check if signup is needed
     - GET /auth/signup-needed
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<SignupNeeded200Response> 
     */
    open class func signupNeededWithRequestBuilder(apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<SignupNeeded200Response> {
        let localVariablePath = "/auth/signup-needed"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SignupNeeded200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Verify organization
     
     - parameter verifyOrgRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: VerifyOrg200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func verifyOrg(verifyOrgRequest: VerifyOrgRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> VerifyOrg200Response {
        return try await verifyOrgWithRequestBuilder(verifyOrgRequest: verifyOrgRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Verify organization
     - POST /auth/verify-org
     - parameter verifyOrgRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<VerifyOrg200Response> 
     */
    open class func verifyOrgWithRequestBuilder(verifyOrgRequest: VerifyOrgRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<VerifyOrg200Response> {
        let localVariablePath = "/auth/verify-org"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: verifyOrgRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<VerifyOrg200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**

     - parameter apiConfiguration: The configuration for the http request.
     - returns: Whoami200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func whoami(apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> Whoami200Response {
        return try await whoamiWithRequestBuilder(apiConfiguration: apiConfiguration).execute().body
    }

    /**
     - GET /auth/whoami
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<Whoami200Response> 
     */
    open class func whoamiWithRequestBuilder(apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<Whoami200Response> {
        let localVariablePath = "/auth/whoami"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Whoami200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}
