//
// DeployedWorfklowAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class DeployedWorfklowAPI {

    /**
     Get all deployed workflows
     
     - parameter getDeployedWorkflowsRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [DeployedWorkflowSchema]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDeployedWorkflows(getDeployedWorkflowsRequest: GetDeployedWorkflowsRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> [DeployedWorkflowSchema] {
        return try await getDeployedWorkflowsWithRequestBuilder(getDeployedWorkflowsRequest: getDeployedWorkflowsRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get all deployed workflows
     - POST /deployed-workflows
     - parameter getDeployedWorkflowsRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[DeployedWorkflowSchema]> 
     */
    open class func getDeployedWorkflowsWithRequestBuilder(getDeployedWorkflowsRequest: GetDeployedWorkflowsRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<[DeployedWorkflowSchema]> {
        let localVariablePath = "/deployed-workflows"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getDeployedWorkflowsRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[DeployedWorkflowSchema]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get all deployed workflows
     
     - parameter id: (query)  (optional)
     - parameter filters: (query)  (optional)
     - parameter latest: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [DeployedWorkflowSchema]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDeployedWorkflowsQuery(id: [String]? = nil, filters: GetDeployedWorkflowsQueryFiltersParameter? = nil, latest: String? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> [DeployedWorkflowSchema] {
        return try await getDeployedWorkflowsQueryWithRequestBuilder(id: id, filters: filters, latest: latest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get all deployed workflows
     - GET /deployed-workflows
     - parameter id: (query)  (optional)
     - parameter filters: (query)  (optional)
     - parameter latest: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[DeployedWorkflowSchema]> 
     */
    open class func getDeployedWorkflowsQueryWithRequestBuilder(id: [String]? = nil, filters: GetDeployedWorkflowsQueryFiltersParameter? = nil, latest: String? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<[DeployedWorkflowSchema]> {
        let localVariablePath = "/deployed-workflows"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "id": (wrappedValue: id?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filters": (wrappedValue: filters?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "latest": (wrappedValue: latest?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[DeployedWorkflowSchema]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Returns a deployed workflow by id
     
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: DeployedWorkflowSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getOneDeployedWorkflow(id: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> DeployedWorkflowSchema {
        return try await getOneDeployedWorkflowWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Returns a deployed workflow by id
     - GET /deployed-workflow/{id}
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<DeployedWorkflowSchema> 
     */
    open class func getOneDeployedWorkflowWithRequestBuilder(id: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<DeployedWorkflowSchema> {
        var localVariablePath = "/deployed-workflow/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<DeployedWorkflowSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}
