//
// AnalyticsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class AnalyticsAPI {

    /**
     Get analytics data for an organization from Intercom
     
     - parameter orgId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetAccountAnalytics200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getAccountAnalytics(orgId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetAccountAnalytics200Response {
        return try await getAccountAnalyticsWithRequestBuilder(orgId: orgId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get analytics data for an organization from Intercom
     - GET /analytics/account/{org_id}
     - parameter orgId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetAccountAnalytics200Response> 
     */
    open class func getAccountAnalyticsWithRequestBuilder(orgId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<GetAccountAnalytics200Response> {
        var localVariablePath = "/analytics/account/{org_id}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{org_id}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetAccountAnalytics200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get daily pole measurement usage for an organization
     
     - parameter orgId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetDailyUsage200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getDailyUsage(orgId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetDailyUsage200Response {
        return try await getDailyUsageWithRequestBuilder(orgId: orgId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get daily pole measurement usage for an organization
     - GET /analytics/usage/{org_id}
     - parameter orgId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetDailyUsage200Response> 
     */
    open class func getDailyUsageWithRequestBuilder(orgId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<GetDailyUsage200Response> {
        var localVariablePath = "/analytics/usage/{org_id}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{org_id}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetDailyUsage200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get events for an entire organization
     
     - parameter orgId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetOrgEvents200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getOrgEvents(orgId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetOrgEvents200Response {
        return try await getOrgEventsWithRequestBuilder(orgId: orgId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get events for an entire organization
     - GET /analytics/events/{org_id}
     - parameter orgId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetOrgEvents200Response> 
     */
    open class func getOrgEventsWithRequestBuilder(orgId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<GetOrgEvents200Response> {
        var localVariablePath = "/analytics/events/{org_id}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{org_id}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetOrgEvents200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get session trends over time for an organization
     
     - parameter orgId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetSessionTrends200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getSessionTrends(orgId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetSessionTrends200Response {
        return try await getSessionTrendsWithRequestBuilder(orgId: orgId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get session trends over time for an organization
     - GET /analytics/sessions/{org_id}
     - parameter orgId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetSessionTrends200Response> 
     */
    open class func getSessionTrendsWithRequestBuilder(orgId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<GetSessionTrends200Response> {
        var localVariablePath = "/analytics/sessions/{org_id}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{org_id}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetSessionTrends200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get detailed user analytics for an organization
     
     - parameter orgId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetUserAnalytics200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getUserAnalytics(orgId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetUserAnalytics200Response {
        return try await getUserAnalyticsWithRequestBuilder(orgId: orgId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get detailed user analytics for an organization
     - GET /analytics/users/{org_id}
     - parameter orgId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetUserAnalytics200Response> 
     */
    open class func getUserAnalyticsWithRequestBuilder(orgId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<GetUserAnalytics200Response> {
        var localVariablePath = "/analytics/users/{org_id}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{org_id}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetUserAnalytics200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get recent events for a specific user
     
     - parameter userId: (path)  
     - parameter orgId: (query)  
     - parameter days: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetUserEvents200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getUserEvents(userId: String, orgId: String, days: UpdateCustomTypeRequestPropertiesValueEnumInner? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetUserEvents200Response {
        return try await getUserEventsWithRequestBuilder(userId: userId, orgId: orgId, days: days, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get recent events for a specific user
     - GET /analytics/events/user/{user_id}
     - parameter userId: (path)  
     - parameter orgId: (query)  
     - parameter days: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetUserEvents200Response> 
     */
    open class func getUserEventsWithRequestBuilder(userId: String, orgId: String, days: UpdateCustomTypeRequestPropertiesValueEnumInner? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<GetUserEvents200Response> {
        var localVariablePath = "/analytics/events/user/{user_id}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{user_id}", with: userIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "days": (wrappedValue: days?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "org_id": (wrappedValue: orgId.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetUserEvents200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Refresh analytics cache for an organization
     
     - parameter orgId: (path)  
     - parameter refreshAnalyticsRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RefreshAnalytics200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func refreshAnalytics(orgId: String, refreshAnalyticsRequest: RefreshAnalyticsRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> RefreshAnalytics200Response {
        return try await refreshAnalyticsWithRequestBuilder(orgId: orgId, refreshAnalyticsRequest: refreshAnalyticsRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Refresh analytics cache for an organization
     - POST /analytics/refresh/{org_id}
     - parameter orgId: (path)  
     - parameter refreshAnalyticsRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RefreshAnalytics200Response> 
     */
    open class func refreshAnalyticsWithRequestBuilder(orgId: String, refreshAnalyticsRequest: RefreshAnalyticsRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<RefreshAnalytics200Response> {
        var localVariablePath = "/analytics/refresh/{org_id}"
        let orgIdPreEscape = "\(APIHelper.mapValueToPathItem(orgId))"
        let orgIdPostEscape = orgIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{org_id}", with: orgIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: refreshAnalyticsRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RefreshAnalytics200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}
