//
// ExportAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ExportAPI {

    /**
     Get export status counts for a given export/job id
     
     - parameter jobId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ExportStatus200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func exportStatus(jobId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> ExportStatus200Response {
        return try await exportStatusWithRequestBuilder(jobId: jobId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get export status counts for a given export/job id
     - GET /exports/status/{jobId}
     - parameter jobId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ExportStatus200Response> 
     */
    open class func exportStatusWithRequestBuilder(jobId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<ExportStatus200Response> {
        var localVariablePath = "/exports/status/{jobId}"
        let jobIdPreEscape = "\(APIHelper.mapValueToPathItem(jobId))"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ExportStatus200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get a Katapult job by ID
     
     - parameter jobId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [GetKatapultJob200ResponseInner]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getKatapultJob(jobId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> [GetKatapultJob200ResponseInner] {
        return try await getKatapultJobWithRequestBuilder(jobId: jobId, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get a Katapult job by ID
     - GET /exports/katapult/{jobId}
     - parameter jobId: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[GetKatapultJob200ResponseInner]> 
     */
    open class func getKatapultJobWithRequestBuilder(jobId: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<[GetKatapultJob200ResponseInner]> {
        var localVariablePath = "/exports/katapult/{jobId}"
        let jobIdPreEscape = "\(APIHelper.mapValueToPathItem(jobId))"
        let jobIdPostEscape = jobIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{jobId}", with: jobIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[GetKatapultJob200ResponseInner]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     * enum for parameter exportType
     */
    public enum ExportType_triggerExport: String, Sendable, CaseIterable {
        case katapult = "katapult"
        case csv = "csv"
    }

    /**
     Trigger an export to external system
     
     - parameter exportType: (path)  
     - parameter triggerExportRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: TriggerExport200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func triggerExport(exportType: ExportType_triggerExport, triggerExportRequest: TriggerExportRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> TriggerExport200Response {
        return try await triggerExportWithRequestBuilder(exportType: exportType, triggerExportRequest: triggerExportRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Trigger an export to external system
     - POST /exports/{exportType}
     - parameter exportType: (path)  
     - parameter triggerExportRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<TriggerExport200Response> 
     */
    open class func triggerExportWithRequestBuilder(exportType: ExportType_triggerExport, triggerExportRequest: TriggerExportRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<TriggerExport200Response> {
        var localVariablePath = "/exports/{exportType}"
        let exportTypePreEscape = "\(exportType.rawValue)"
        let exportTypePostEscape = exportTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{exportType}", with: exportTypePostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: triggerExportRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TriggerExport200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}
