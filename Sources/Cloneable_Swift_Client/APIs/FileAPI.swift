//
// FileAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class FileAPI {

    /**
     Add a new file after upload
     
     - parameter createFileSchema: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: CreateFile201Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func createFile(createFileSchema: CreateFileSchema? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> CreateFile201Response {
        return try await createFileWithRequestBuilder(createFileSchema: createFileSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Add a new file after upload
     - PUT /file
     - parameter createFileSchema: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<CreateFile201Response> 
     */
    open class func createFileWithRequestBuilder(createFileSchema: CreateFileSchema? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<CreateFile201Response> {
        let localVariablePath = "/file"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createFileSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateFile201Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Delete a single file
     
     - parameter id: (path)  
     - parameter body: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UpdateFile200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func deleteFile(id: String, body: JSONValue? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> UpdateFile200Response {
        return try await deleteFileWithRequestBuilder(id: id, body: body, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Delete a single file
     - DELETE /file/{id}
     - parameter id: (path)  
     - parameter body: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UpdateFile200Response> 
     */
    open class func deleteFileWithRequestBuilder(id: String, body: JSONValue? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<UpdateFile200Response> {
        var localVariablePath = "/file/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: body, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdateFile200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Returns a signed download url from R2 by fileId
     
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetFileDownloadUrl200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getFileDownloadUrl(id: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetFileDownloadUrl200Response {
        return try await getFileDownloadUrlWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Returns a signed download url from R2 by fileId
     - GET /file/{id}/download-url
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetFileDownloadUrl200Response> 
     */
    open class func getFileDownloadUrlWithRequestBuilder(id: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<GetFileDownloadUrl200Response> {
        var localVariablePath = "/file/{id}/download-url"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetFileDownloadUrl200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get all files
     
     - parameter getFilesRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: [FileSchema]
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getFiles(getFilesRequest: GetFilesRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> [FileSchema] {
        return try await getFilesWithRequestBuilder(getFilesRequest: getFilesRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get all files
     - POST /files
     - parameter getFilesRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<[FileSchema]> 
     */
    open class func getFilesWithRequestBuilder(getFilesRequest: GetFilesRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<[FileSchema]> {
        let localVariablePath = "/files"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: getFilesRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[FileSchema]>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get paginated files
     
     - parameter index: (query)  (optional)
     - parameter size: (query)  (optional)
     - parameter filters: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter latest: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: GetManyFiles200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getManyFiles(index: Int? = nil, size: Int? = nil, filters: GetManyFilesFiltersParameter? = nil, id: [String]? = nil, latest: String? = nil, sorting: GetManyFilesSortingParameter? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> GetManyFiles200Response {
        return try await getManyFilesWithRequestBuilder(index: index, size: size, filters: filters, id: id, latest: latest, sorting: sorting, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get paginated files
     - GET /files
     - parameter index: (query)  (optional)
     - parameter size: (query)  (optional)
     - parameter filters: (query)  (optional)
     - parameter id: (query)  (optional)
     - parameter latest: (query)  (optional)
     - parameter sorting: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<GetManyFiles200Response> 
     */
    open class func getManyFilesWithRequestBuilder(index: Int? = nil, size: Int? = nil, filters: GetManyFilesFiltersParameter? = nil, id: [String]? = nil, latest: String? = nil, sorting: GetManyFilesSortingParameter? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<GetManyFiles200Response> {
        let localVariablePath = "/files"
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "index": (wrappedValue: index?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "size": (wrappedValue: size?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "filters": (wrappedValue: filters?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "id": (wrappedValue: id?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "latest": (wrappedValue: latest?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
            "sorting": (wrappedValue: sorting?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetManyFiles200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get a single files
     
     - parameter id: (path)  
     - parameter downloadUrl: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: FileSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func getOneFile(id: String, downloadUrl: Bool? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> FileSchema {
        return try await getOneFileWithRequestBuilder(id: id, downloadUrl: downloadUrl, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get a single files
     - GET /file/{id}
     - parameter id: (path)  
     - parameter downloadUrl: (query)  (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<FileSchema> 
     */
    open class func getOneFileWithRequestBuilder(id: String, downloadUrl: Bool? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<FileSchema> {
        var localVariablePath = "/file/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "download_url": (wrappedValue: downloadUrl?.asParameter(codableHelper: apiConfiguration.codableHelper), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<FileSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Returns a signed upload url from R2 by file.id
     
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RetryFileUploadUrl200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func retryFileUploadUrl(id: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> RetryFileUploadUrl200Response {
        return try await retryFileUploadUrlWithRequestBuilder(id: id, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Returns a signed upload url from R2 by file.id
     - GET /file/{id}/retry-upload-url
     - parameter id: (path)  
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<RetryFileUploadUrl200Response> 
     */
    open class func retryFileUploadUrlWithRequestBuilder(id: String, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<RetryFileUploadUrl200Response> {
        var localVariablePath = "/file/{id}/retry-upload-url"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters: [String: any Sendable]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<RetryFileUploadUrl200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Update a single file
     
     - parameter id: (path)  
     - parameter insertFileSchema: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: UpdateFile200Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func updateFile(id: String, insertFileSchema: InsertFileSchema? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> UpdateFile200Response {
        return try await updateFileWithRequestBuilder(id: id, insertFileSchema: insertFileSchema, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Update a single file
     - POST /file/{id}
     - parameter id: (path)  
     - parameter insertFileSchema: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<UpdateFile200Response> 
     */
    open class func updateFileWithRequestBuilder(id: String, insertFileSchema: InsertFileSchema? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<UpdateFile200Response> {
        var localVariablePath = "/file/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: insertFileSchema, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UpdateFile200Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}
