//
// JobAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class JobAPI {

    /**
     Get job by id
     
     - parameter id: (path)  
     - parameter xApiKey: (header)  
     - parameter modelConversionJobCompleteRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: String
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func modelConversionJobComplete(id: String, xApiKey: String, modelConversionJobCompleteRequest: ModelConversionJobCompleteRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> String {
        return try await modelConversionJobCompleteWithRequestBuilder(id: id, xApiKey: xApiKey, modelConversionJobCompleteRequest: modelConversionJobCompleteRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get job by id
     - POST /job/model-conversion/{id}/complete
     - parameter id: (path)  
     - parameter xApiKey: (header)  
     - parameter modelConversionJobCompleteRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<String> 
     */
    open class func modelConversionJobCompleteWithRequestBuilder(id: String, xApiKey: String, modelConversionJobCompleteRequest: ModelConversionJobCompleteRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<String> {
        var localVariablePath = "/job/model-conversion/{id}/complete"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modelConversionJobCompleteRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
            "x-api-key": xApiKey.asParameter(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<String>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Get job by id
     
     - parameter id: (path)  
     - parameter xApiKey: (header)  
     - parameter modelConversionJobStatusRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ModelConversionJobSchema
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func modelConversionJobStatus(id: String, xApiKey: String, modelConversionJobStatusRequest: ModelConversionJobStatusRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> ModelConversionJobSchema {
        return try await modelConversionJobStatusWithRequestBuilder(id: id, xApiKey: xApiKey, modelConversionJobStatusRequest: modelConversionJobStatusRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Get job by id
     - POST /job/model-conversion/{id}/status
     - parameter id: (path)  
     - parameter xApiKey: (header)  
     - parameter modelConversionJobStatusRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ModelConversionJobSchema> 
     */
    open class func modelConversionJobStatusWithRequestBuilder(id: String, xApiKey: String, modelConversionJobStatusRequest: ModelConversionJobStatusRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<ModelConversionJobSchema> {
        var localVariablePath = "/job/model-conversion/{id}/status"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modelConversionJobStatusRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
            "x-api-key": xApiKey.asParameter(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelConversionJobSchema>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }

    /**
     Create new model file and get upload url
     
     - parameter id: (path)  
     - parameter xApiKey: (header)  
     - parameter modelConversionJobUploadRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: ModelConversionJobUpload201Response
     */
    @available(macOS 10.15, iOS 13.0, tvOS 13.0, watchOS 6.0, *)
    open class func modelConversionJobUpload(id: String, xApiKey: String, modelConversionJobUploadRequest: ModelConversionJobUploadRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) async throws(ErrorResponse) -> ModelConversionJobUpload201Response {
        return try await modelConversionJobUploadWithRequestBuilder(id: id, xApiKey: xApiKey, modelConversionJobUploadRequest: modelConversionJobUploadRequest, apiConfiguration: apiConfiguration).execute().body
    }

    /**
     Create new model file and get upload url
     - POST /job/model-conversion/{id}/upload
     - parameter id: (path)  
     - parameter xApiKey: (header)  
     - parameter modelConversionJobUploadRequest: (body) Body (optional)
     - parameter apiConfiguration: The configuration for the http request.
     - returns: RequestBuilder<ModelConversionJobUpload201Response> 
     */
    open class func modelConversionJobUploadWithRequestBuilder(id: String, xApiKey: String, modelConversionJobUploadRequest: ModelConversionJobUploadRequest? = nil, apiConfiguration: Cloneable_Swift_ClientAPIConfiguration = Cloneable_Swift_ClientAPIConfiguration.shared) -> RequestBuilder<ModelConversionJobUpload201Response> {
        var localVariablePath = "/job/model-conversion/{id}/upload"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = apiConfiguration.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: modelConversionJobUploadRequest, codableHelper: apiConfiguration.codableHelper)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: (any Sendable)?] = [
            "Content-Type": "application/json",
            "x-api-key": xApiKey.asParameter(codableHelper: apiConfiguration.codableHelper),
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ModelConversionJobUpload201Response>.Type = apiConfiguration.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: false, apiConfiguration: apiConfiguration)
    }
}
